{"id": "HumanEval/0", "code": "from typing import List\nimport unittest\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # Precondition 1: The 'numbers' list should not be empty.\n    assert len(numbers) > 0, \"The list of numbers should not be empty.\"\n\n    # Precondition 2: The 'threshold' should be a positive number.\n    assert threshold > 0, \"Threshold must be a positive number.\"\n\n    # Precondition 3: All elements in 'numbers' should be of type float or int.\n    assert all(isinstance(num, (float, int)) for num in numbers), \"All elements in the list must be of type float or int.\"\n\n    sorted_numbers = sorted(numbers)\n\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            result = True\n            break\n    else:\n        result = False\n\n    # Postcondition 1: The sorted list should have the same length as the original list.\n    assert len(sorted_numbers) == len(numbers), \"Sorted list length should match original list length.\"\n\n    # Postcondition 2: The sorted list should have all elements from the original list.\n    assert all(elem in sorted_numbers for elem in numbers), \"All elements of the original list must be in the sorted list.\"\n\n    # Postcondition 3: The sorted list should be in non-decreasing order.\n    assert all(sorted_numbers[i] <= sorted_numbers[i + 1] for i in range(len(sorted_numbers) - 1)), \"Sorted list should be in non-decreasing order.\"\n\n    # Postcondition 4: If the result is True, at least one pair of adjacent elements should have a difference less than the threshold.\n    if result:\n        assert any(sorted_numbers[i + 1] - sorted_numbers[i] < threshold for i in range(len(sorted_numbers) - 1)), \"If True, there must be at least one pair with a difference less than the threshold.\"\n\n    # Postcondition 5: If the result is False, no pair of adjacent elements should have a difference less than the threshold.\n    if not result:\n        assert all(sorted_numbers[i + 1] - sorted_numbers[i] >= threshold for i in range(len(sorted_numbers) - 1)), \"If False, no pair should have a difference less than the threshold.\"\n\n    return result\n"}
{"id": "HumanEval/1", "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert paren_string is not None, \"Input must not be None.\"\n    assert isinstance(paren_string, str), \"Input must be a string.\"\n    assert paren_string.count(\"(\") == paren_string.count(\")\"), \"The number of '(' should equal the number of ')' in the input string.\"\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n\n    assert sum(1 for ch in paren_string if ch == \"(\") == sum(len(group) // 2 for group in results), \"The total number of '(' in input should match the half of the sum of lengths of groups.\"\n    # Postcondition 2: All elements in the result list should be non-empty strings.\n    assert all(len(group) > 0 for group in results), \"All groups in the results should be non-empty strings.\"\n\n    # Postcondition 3: Each string in the result should start with '(' and end with ')'.\n    assert all(group.startswith(\"(\") and group.endswith(\")\") for group in results), \"Each group should start with '(' and end with ')'.\"\n\n    # Postcondition 4: Each string in the result should be a balanced group of parentheses.\n    assert all(group.count(\"(\") == group.count(\")\") for group in results), \"Each group should have an equal number of opening and closing parentheses.\"\n\n    # Postcondition 5: The concatenation of all strings in the result should form the input string with spaces removed.\n    assert \"\".join(results) == paren_string.replace(\" \", \"\"), \"Concatenation of all results should equal the input string with spaces removed.\"\n\n    # Postcondition 6: If the input string is empty or contains only spaces, the result should be an empty list.\n    if not paren_string.strip():\n        assert results == [], \"If the input string is empty or spaces, the result should be an empty list.\"\n\n    # Postcondition 7: The total number of opening parentheses should equal the total number of closing parentheses.\n    assert paren_string.count(\"(\") == paren_string.count(\")\"), \"The total number of opening and closing parentheses in the input should be equal.\"\n\n    return results\n\nassert isinstance(separate_paren_groups('( ) (( )) (( )( ))'), list)\nassert separate_paren_groups('((()))') == ['((()))']\nassert separate_paren_groups('()()()()') == ['()', '()', '()', '()']\nassert separate_paren_groups('((()))((()))') == ['((()))', '((()))']\nassert separate_paren_groups('(())(())(())') == ['(())', '(())', '(())']"}
{"id": "HumanEval/2", "code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than the given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Precondition 1: The input should not be None (null).\n    assert number is not None, \"Input must not be None.\"\n\n    # Precondition 2: The input should be a float.\n    assert isinstance(number, float), \"Input must be a float.\"\n\n    # Precondition 3: The input number should be positive.\n    assert number > 0, \"Input number must be positive.\"\n\n    # Precondition 4: The input number should be within a reasonable boundary.\n    max_value = 10**6  # Example boundary condition; adjust as needed.\n    assert number <= max_value, f\"Input number should not exceed {max_value}.\"\n\n    result = number - int(number)\n\n    # Postcondition 1: The result should be non-negative.\n    assert result >= 0, \"The result should be non-negative.\"\n\n    # Postcondition 2: The result should be less than 1.\n    assert result < 1, \"The result should be less than 1.\"\n\n    # Postcondition 3: The result should be equal to the difference between the number and its integer part.\n    assert result == number - int(number), \"The result should match the difference between the input number and its integer part.\"\n\n    # Postcondition 4: The result should be a float.\n    assert isinstance(result, float), \"The result should be a float.\"\n\n    # Postcondition 5: If the input number is an integer, the result should be 0.0.\n    if number == int(number):\n        assert result == 0.0, \"For integer inputs, the result should be 0.0.\"\n\n    return result\n\n\nassert isinstance(truncate_number(3.5), float)\nassert truncate_number(3.5) == 0.5\nassert 0 <= truncate_number(9.75) < 1\nassert truncate_number(4.0) == 0.0\nassert truncate_number(0.12345) == 0.12345\n\n"}
{"id": "HumanEval/3", "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    # Precondition 1: The input should not be None (null).\n    assert operations is not None, \"Input must not be None.\"\n\n    # Precondition 2: The input should be a list.\n    assert isinstance(operations, list), \"Input must be a list.\"\n\n    # Precondition 3: All elements in the list should be integers.\n    assert all(isinstance(operation, int) for operation in operations), \"All elements in the list must be integers.\"\n\n    # Precondition 4: The input list should not be empty.\n    assert len(operations) >= 0, \"Input list must not be empty.\"\n\n    # Precondition 5: The length of the operations list should be within a reasonable boundary.\n    max_operations = 10**6  # Example boundary condition; adjust as needed.\n    assert len(operations) <= max_operations, f\"Input list should not exceed {max_operations} elements.\"\n\n    account = 0\n\n    # Postcondition 1: The initial account balance should be zero.\n    assert account == 0, \"Initial account balance should be zero.\"\n\n    for operation in operations:\n        account += operation\n        if account < 0:\n            # Postcondition 2: If the function returns True, the account balance must have gone below zero.\n            assert account < 0, \"If returning True, account balance must be below zero.\"\n            return True\n\n    # Postcondition 3: If the function returns False, the account balance never went below zero.\n    assert account >= 0, \"If returning False, account balance never went below zero.\"\n\n    # Postcondition 4: The result should be a boolean value.\n    result = False\n    assert isinstance(result, bool), \"The result should be a boolean value.\"\n\n    return result\n\n\nassert below_zero([]) == False\nassert below_zero([1, 2, 3]) == False\nassert below_zero([-1, -2, -3]) == True\nassert below_zero([1, 2, -4, 5]) == True\nassert below_zero([-1, 1, -1, 1]) == True\n\n"}
{"id": "HumanEval/4", "code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    assert isinstance(numbers, list)\n    assert all(isinstance(num, (int, float)) for num in numbers)\n    mean = sum(numbers) / len(numbers)\n    assert mean == sum(numbers) / len(numbers)\n    assert abs(mean - sum(numbers) / len(numbers)) >= 0\n    assert 0 <= sum(abs(x - mean) for x in numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"id": "HumanEval/5", "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    # Precondition 1: The input list 'numbers' should not be None.\n    assert numbers is not None, \"Input list 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list and 'delimeter' should be an integer.\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n    assert isinstance(delimeter, int), \"Input 'delimeter' must be an integer.\"\n\n    # Precondition 3: All elements in the list should be integers.\n    assert all(isinstance(num, int) for num in numbers), \"All elements in 'numbers' must be integers.\"\n\n    # Precondition 4: The length of the 'numbers' list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input list 'numbers' should not exceed {max_length} elements.\"\n\n    original_numbers = numbers[:]  # Copy of the original list for postcondition check\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(res, list), \"The result must be a list.\"\n\n    # Postcondition 2: The length of the result should be 2 * len(numbers) - 1 if numbers is not empty.\n    expected_length = 2 * len(numbers) - 1 if len(numbers) > 0 else 0\n    assert len(res) == expected_length, \"The length of the result is incorrect.\"\n\n    # Postcondition 3: The delimiter should be placed correctly between every two consecutive elements.\n    for i in range(1, len(res) - 1, 2):\n        assert res[i] == delimeter, \"The delimiter is not correctly placed between elements.\"\n\n    # Postcondition 4: The input list 'numbers' should remain unchanged.\n    assert numbers == original_numbers, \"The input list 'numbers' should remain unchanged.\"\n\n    # Postcondition 5: If the input list is empty, the result should also be an empty list.\n    if len(numbers) == 0:\n        assert res == [], \"If the input list is empty, the result should also be an empty list.\"\n\n    return res\n\n\n\n"}
{"id": "HumanEval/6", "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented by multiple groups of nested parentheses separated by spaces.\n    For each of the groups, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Precondition 1: The input 'paren_string' should not be None.\n    assert paren_string is not None, \"Input string 'paren_string' must not be None.\"\n\n    # Precondition 2: The input should be a string.\n    assert isinstance(paren_string, str), \"Input 'paren_string' must be a string.\"\n\n    # Precondition 3: The input should only contain '(', ')', and spaces.\n    assert all(ch in \"() \" for ch in paren_string), \"Input string should only contain '(', ')', and spaces.\"\n\n    # Precondition 4: Each group of parentheses in the input string should be balanced.\n    def is_balanced(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            if cnt < 0:\n                return False\n        return cnt == 0\n\n    assert all(is_balanced(s) for s in paren_string.split(\" \") if s != \"\"), \"Each group of parentheses must be balanced.\"\n\n    # Precondition 5: The input string length should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(paren_string) <= max_length, f\"Input string should not exceed {max_length} characters.\"\n\n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    result = [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(result, list) and all(isinstance(depth, int) for depth in result), \"The result must be a list of integers.\"\n\n    # Postcondition 2: The length of the result list should match the number of groups in the input string.\n    num_groups = len([s for s in paren_string.split(\" \") if s != \"\"])\n    assert len(result) == num_groups, \"The length of the result list should match the number of groups in the input string.\"\n\n    # Postcondition 3: Each element in the result list should be a non-negative integer.\n    assert all(depth >= 0 for depth in result), \"Each depth value in the result list should be non-negative.\"\n\n    # Postcondition 4: The maximum depth should be correct based on the input structure.\n    for i, group in enumerate(paren_string.split(\" \")):\n        if group:\n            assert result[i] == max(count_depth(group), 0), \"The calculated maximum depth should match the input structure.\"\n\n    # Postcondition 5: If the input string is empty or contains only spaces, the result should be an empty list.\n    if paren_string.strip() == \"\":\n        assert result == [], \"If the input string is empty or spaces, the result should be an empty list.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/7", "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    # Precondition 1: The input 'strings' and 'substring' should not be None.\n    assert strings is not None, \"Input list 'strings' must not be None.\"\n    assert substring is not None, \"Input 'substring' must not be None.\"\n\n    # Precondition 2: The input 'strings' should be a list and 'substring' should be a string.\n    assert isinstance(strings, list), \"Input 'strings' must be a list.\"\n    assert isinstance(substring, str), \"Input 'substring' must be a string.\"\n\n    # Precondition 3: All elements in the list 'strings' should be strings.\n    assert all(isinstance(s, str) for s in strings), \"All elements in 'strings' must be strings.\"\n\n    # Precondition 4: The length of the 'strings' list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(strings) <= max_length, f\"Input list 'strings' should not exceed {max_length} elements.\"\n\n    original_strings = strings[:]  # Copy of the original list for postcondition check\n\n    result = list(filter(lambda s: substring in s, strings))\n\n    # Postcondition 1: The result should be a list of strings.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(s, str) for s in result), \"All elements in the result must be strings.\"\n\n    # Postcondition 2: Each string in the result should contain the 'substring'.\n    assert all(substring in s for s in result), \"Each string in the result should contain the 'substring'.\"\n\n    # Postcondition 3: The input list 'strings' should remain unchanged.\n    assert strings == original_strings, \"The input list 'strings' should remain unchanged.\"\n\n    # Postcondition 4: If the 'substring' is an empty string, the result should be the same as the input 'strings'.\n    if substring == \"\":\n        assert result == strings, \"If 'substring' is empty, the result should be the same as the input 'strings'.\"\n\n    # Postcondition 5: If the input list 'strings' is empty, the result should also be an empty list.\n    if len(strings) == 0:\n        assert result == [], \"If the input list 'strings' is empty, the result should also be an empty list.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/8", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input list 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list.\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n\n    # Precondition 3: All elements in the list 'numbers' should be integers.\n    assert all(isinstance(num, int) for num in numbers), \"All elements in 'numbers' must be integers.\"\n\n    # Precondition 4: The length of the 'numbers' list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input list 'numbers' should not exceed {max_length} elements.\"\n\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\n"}
{"id": "HumanEval/9", "code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum elements found until the given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input list 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list.\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n\n    # Precondition 3: All elements in the list 'numbers' should be integers.\n    assert all(isinstance(num, int) for num in numbers), \"All elements in 'numbers' must be integers.\"\n\n    # Precondition 4: The length of the 'numbers' list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input list 'numbers' should not exceed {max_length} elements.\"\n\n    result = [max(numbers[:(i + 1)]) for i in range(len(numbers))]\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(result, list) and all(isinstance(x, int) for x in result), \"The result must be a list of integers.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(numbers), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: Each element in the result should be the maximum of all elements up to that point.\n    for i in range(len(result)):\n        assert result[i] == max(numbers[:i + 1]), f\"Element at index {i} should be the maximum of elements up to that point.\"\n\n    # Postcondition 4: The result list should be non-decreasing.\n    assert all(result[i] >= result[i - 1] for i in range(1, len(result))), \"The result list should be non-decreasing.\"\n\n    # Postcondition 5: If the input list 'numbers' is empty, the result should also be an empty list.\n    if len(numbers) == 0:\n        assert result == [], \"If the input list 'numbers' is empty, the result should also be an empty list.\"\n\n    return result\n"}
{"id": "HumanEval/10", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of the supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input string 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    # Precondition 3: The length of the input string should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(string) <= max_length, f\"Input string 'string' should not exceed {max_length} characters.\"\n\n    if is_palindrome(string):\n        result = string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                result = string + string[i-1::-1]\n                break\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should be a palindrome.\n    assert is_palindrome(result), \"The result must be a palindrome.\"\n\n    # Postcondition 3: The result should start with the original string.\n    assert result.startswith(string), \"The result must start with the original string.\"\n\n    # Postcondition 4: The result should be the shortest possible palindrome that can be formed.\n    for i in range(1, len(result)):\n        assert not is_palindrome(result[:-i]), \"The result should be the shortest possible palindrome.\"\n\n    # Postcondition 5: If the input string is empty, the result should also be an empty string.\n    if len(string) == 0:\n        assert result == \"\", \"If the input string is empty, the result should also be an empty string.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/11", "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Precondition 1: The input strings 'a' and 'b' should not be None.\n    assert a is not None, \"Input string 'a' must not be None.\"\n    assert b is not None, \"Input string 'b' must not be None.\"\n\n    # Precondition 2: The input 'a' and 'b' should be strings.\n    assert isinstance(a, str), \"Input 'a' must be a string.\"\n    assert isinstance(b, str), \"Input 'b' must be a string.\"\n\n    # Precondition 3: The input strings 'a' and 'b' should have the same length.\n    assert len(a) == len(b), \"Input strings 'a' and 'b' must have the same length.\"\n\n    # Precondition 4: The input strings should only contain '1's and '0's.\n    assert all(ch in '01' for ch in a), \"Input string 'a' must only contain '1's and '0's.\"\n    assert all(ch in '01' for ch in b), \"Input string 'b' must only contain '1's and '0's.\"\n\n    # Precondition 5: The length of the input strings should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(a) <= max_length, f\"Input string 'a' should not exceed {max_length} characters.\"\n    assert len(b) <= max_length, f\"Input string 'b' should not exceed {max_length} characters.\"\n\n    result = \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The length of the result should be equal to the length of the input strings.\n    assert len(result) == len(a), \"The length of the result must be equal to the length of the input strings.\"\n\n    # Postcondition 3: The result should only contain '1's and '0's.\n    assert all(ch in '01' for ch in result), \"The result must only contain '1's and '0's.\"\n\n    # Postcondition 4: The result should be the correct XOR of the input strings.\n    for i in range(len(result)):\n        assert result[i] == str(int(a[i]) ^ int(b[i])), f\"The result at index {i} is incorrect.\"\n\n    # Postcondition 5: If the input strings are empty, the result should also be an empty string.\n    if len(a) == 0 and len(b) == 0:\n        assert result == \"\", \"If the input strings are empty, the result should also be an empty string.\"\n\n    return result\n"}
{"id": "HumanEval/12", "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    # Precondition 1: The input 'strings' should not be None.\n    assert strings is not None, \"Input list 'strings' must not be None.\"\n\n    # Precondition 2: The input 'strings' should be a list.\n    assert isinstance(strings, list), \"Input 'strings' must be a list.\"\n\n    # Precondition 3: All elements in the list 'strings' should be strings.\n    assert all(isinstance(s, str) for s in strings), \"All elements in 'strings' must be strings.\"\n\n    # Precondition 4: The length of the 'strings' list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(strings) <= max_length, f\"Input list 'strings' should not exceed {max_length} elements.\"\n\n    if not strings:\n        result = None\n    else:\n        maxlen = max(len(x) for x in strings)\n        result = next(s for s in strings if len(s) == maxlen)\n\n    # Postcondition 1: The result should be either a string or None.\n    assert result is None or isinstance(result, str), \"The result must be either a string or None.\"\n\n    # Postcondition 2: The result should be the longest string from the input list, if not None.\n    if result is not None:\n        assert len(result) == max(len(s) for s in strings), \"The result must be the longest string from the input list.\"\n\n    # Postcondition 3: If there are multiple strings of the same maximum length, the result should be the first one.\n    if result is not None:\n        maxlen = max(len(x) for x in strings)\n        assert result == next(s for s in strings if len(s) == maxlen), \"The result must be the first string with the maximum length.\"\n\n    # Postcondition 4: If the input list is empty, the result should be None.\n    if not strings:\n        assert result is None, \"If the input list is empty, the result should be None.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/13", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Precondition 1: The input integers 'a' and 'b' should not be None.\n    assert a is not None, \"Input 'a' must not be None.\"\n    assert b is not None, \"Input 'b' must not be None.\"\n\n    # Precondition 2: The input 'a' and 'b' should be integers.\n    assert isinstance(a, int), \"Input 'a' must be an integer.\"\n    assert isinstance(b, int), \"Input 'b' must be an integer.\"\n\n    # Precondition 3: The input 'a' and 'b' should be non-negative integers.\n    assert a >= 0, \"Input 'a' must be a non-negative integer.\"\n    assert b >= 0, \"Input 'b' must be a non-negative integer.\"\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n\n    result = query_gcd(a, b)\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The result must be a non-negative integer.\"\n\n    # Postcondition 3: The result should divide both 'a' and 'b' without a remainder.\n    assert a % result == 0 and b % result == 0, \"The result must divide both 'a' and 'b' without a remainder.\"\n\n    # Postcondition 4: The result should be the greatest common divisor.\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            assert i <= result, \"The result must be the greatest common divisor.\"\n\n    return result\n"}
{"id": "HumanEval/14", "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    # Precondition 3: The length of the input string should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(string) <= max_length, f\"Input 'string' should not exceed {max_length} characters.\"\n\n    result = [string[:(i + 1)] for i in range(len(string))]\n\n    # Postcondition 1: The result should be a list of strings.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(prefix, str) for prefix in result), \"All elements in the result must be strings.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input string.\n    assert len(result) == len(string), \"The length of the result list must match the length of the input string.\"\n\n    # Postcondition 3: Each element in the result should be a valid prefix of the input string.\n    for i in range(len(result)):\n        assert result[i] == string[:i + 1], f\"The element at index {i} should be a valid prefix of the input string.\"\n\n    # Postcondition 4: If the input string is empty, the result should be an empty list.\n    if len(string) == 0:\n        assert result == [], \"If the input string is empty, the result should be an empty list.\"\n\n    return result\n"}
{"id": "HumanEval/15", "code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    # Precondition 4: The value of 'n' should be within a reasonable boundary.\n    max_value = 10**6  # Example boundary condition; adjust as needed.\n    assert n <= max_value, f\"Input 'n' should not exceed {max_value}.\"\n\n    result = \" \".join(map(str, range(n + 1)))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should contain space-delimited numbers from 0 to 'n' inclusive.\n    expected_result = \" \".join(map(str, range(n + 1)))\n    assert result == expected_result, f\"The result should be '{expected_result}'.\"\n\n    # Postcondition 3: The length of the result should match the expected length based on 'n'.\n    expected_length = len(\" \".join(map(str, range(n + 1))))\n    assert len(result) == expected_length, f\"The length of the result should be {expected_length}.\"\n\n    # Postcondition 4: If 'n' is 0, the result should be '0'.\n    if n == 0:\n        assert result == \"0\", \"If 'n' is 0, the result should be '0'.\"\n\n    return result\n\n"}
{"id": "HumanEval/16", "code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    # Precondition 3: The length of the input 'string' should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(string) <= max_length, f\"Input 'string' should not exceed {max_length} characters.\"\n\n    result = len(set(string.lower()))\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 3: The result should be the correct count of distinct characters, regardless of case.\n    expected_result = len(set(string.lower()))\n    assert result == expected_result, f\"The result should be {expected_result}.\"\n\n    # Postcondition 4: If the input string is empty, the result should be 0.\n    if len(string) == 0:\n        assert result == 0, \"If the input string is empty, the result should be 0.\"\n\n    return result\n"}
{"id": "HumanEval/17", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\n"}
{"id": "HumanEval/18", "code": "\n\n# def how_many_times(string: str, substring: str) -> int:\n#     \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n#     >>> how_many_times('', 'a')\n#     0\n#     >>> how_many_times('aaa', 'a')\n#     3\n#     >>> how_many_times('aaaa', 'aa')\n#     3\n#     \"\"\"\n\n\n\n#     occurences = 0\n#     for i in range(len(string)):\n#         if string[i:].startswith(substring):\n#             occurences += 1\n#     return occurences\n\n\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Precondition 1: The input 'music_string' should not be None.\n    assert music_string is not None, \"Input 'music_string' must not be None.\"\n\n    # Precondition 2: The input 'music_string' should be a string.\n    assert isinstance(music_string, str), \"Input 'music_string' must be a string.\"\n\n    # Precondition 3: The input string should contain only valid musical note representations.\n    valid_notes = {'o', 'o|', '.|'}\n    assert all(note in valid_notes for note in music_string.split()), \"Input contains invalid musical notes.\"\n\n    # Precondition 4: The length of the input string should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(music_string) <= max_length, f\"Input 'music_string' should not exceed {max_length} characters.\"\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": \n            return 4\n        elif note == \"o|\": \n            return 2\n        elif note == \".|\": \n            return 1\n        else:\n            raise ValueError(f\"Unexpected note: {note}\")\n\n    if music_string == \"\": \n        return []\n\n    result = list(map(count_beats, music_string.split(\" \")))\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(result, list) and all(isinstance(beats, int) for beats in result), \"The result must be a list of integers.\"\n\n    # Postcondition 2: Each integer in the result should correctly correspond to the beats of the notes in the input string.\n    expected_result = [count_beats(note) for note in music_string.split(\" \")]\n    assert result == expected_result, \"The result does not match the expected beats calculation.\"\n\n    # Postcondition 3: The length of the result should match the number of notes in the input string.\n    assert len(result) == len(music_string.split(\" \")), \"The length of the result does not match the number of notes in the input string.\"\n\n    # Postcondition 4: If the input string is empty, the result should be an empty list.\n    if music_string == \"\":\n        assert result == [], \"If the input string is empty, the result should be an empty list.\"\n\n    return result\n"}
{"id": "HumanEval/19", "code": "# from typing import List\n\n\n# def sort_numbers(numbers: str) -> str:\n#     \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n#     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n#     Return the string with numbers sorted from smallest to largest\n#     >>> sort_numbers('three one five')\n#     'one three five'\n#     \"\"\"\n\n\n    \n#     to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n#     if numbers == \"\": return \"\"\n#     return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a string.\n    assert isinstance(numbers, str), \"Input 'numbers' must be a string.\"\n\n    # Precondition 3: The input string should contain only valid number words.\n    valid_numbers = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n    assert all(n in valid_numbers for n in numbers.split()), \"Input contains invalid number words.\"\n\n    # Precondition 4: The length of the input string should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input 'numbers' should not exceed {max_length} characters.\"\n\n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\":\n        result = \"\"\n    else:\n        result = \" \".join(sorted(numbers.split(), key=lambda n: to_int[n]))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The numbers in the result should be correctly sorted from smallest to largest.\n    expected_result = \" \".join(sorted(numbers.split(), key=lambda n: to_int[n]))\n    assert result == expected_result, f\"The result should be '{expected_result}'.\"\n\n    # Postcondition 3: If the input string is empty, the result should also be an empty string.\n    if numbers == \"\":\n        assert result == \"\", \"If the input string is empty, the result should also be an empty string.\"\n\n    return result\n"}
{"id": "HumanEval/20", "code": "# from typing import List, Tuple\n\n\n# def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n#     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n#     other and return them in order (smaller number, larger number).\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n#     (2.0, 2.2)\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n#     (2.0, 2.0)\n#     \"\"\"\n\n\n\n#     numbers.sort()\n#     min_diff = float(\"inf\")\n#     min_pair = None\n#     for l, r in zip(numbers[:-1], numbers[1:]):\n#         diff = r - l\n#         if diff < min_diff:\n#             min_diff = diff\n#             min_pair = (l, r)\n#     return min_pair\n\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two), select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list of floats.\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n    assert all(isinstance(num, (int, float)) for num in numbers), \"All elements in 'numbers' must be floats or integers.\"\n\n    # Precondition 3: The input list 'numbers' should have at least two elements.\n    assert len(numbers) >= 2, \"Input list 'numbers' must have at least two elements.\"\n\n    # Precondition 4: The length of the input list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input list 'numbers' should not exceed {max_length} elements.\"\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n\n    result = min_pair\n\n    # Postcondition 1: The result should be a tuple of two floats.\n    assert isinstance(result, tuple) and len(result) == 2, \"The result must be a tuple of two elements.\"\n    assert all(isinstance(num, float) for num in result), \"Both elements in the result must be floats.\"\n\n    # Postcondition 2: The first element in the result should be less than or equal to the second element.\n    assert result[0] <= result[1], \"The first element in the result should be less than or equal to the second element.\"\n\n    # Postcondition 3: The result should be the closest pair of numbers in the input list.\n    closest_diff = min(numbers[i + 1] - numbers[i] for i in range(len(numbers) - 1))\n    assert result[1] - result[0] == closest_diff, \"The result should have the smallest difference between any two elements in the list.\"\n\n    return result\n\n"}
{"id": "HumanEval/21", "code": "# from typing import List\n\n\n# def rescale_to_unit(numbers: List[float]) -> List[float]:\n#     \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n#     such that the smallest number will become 0 and the largest will become 1\n#     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n#     [0.0, 0.25, 0.5, 0.75, 1.0]\n#     \"\"\"\n\n\n\n#     ma, mi = max(numbers), min(numbers)\n#     k = 1 / (ma - mi)\n#     return list(map(lambda x: (x - mi) * k, numbers))\n\n\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list of floats (or integers).\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n    assert all(isinstance(num, (int, float)) for num in numbers), \"All elements in 'numbers' must be floats or integers.\"\n\n    # Precondition 3: The input list 'numbers' should have at least two elements.\n    assert len(numbers) >= 2, \"Input list 'numbers' must have at least two elements.\"\n\n    # Precondition 4: The length of the input list should be within a reasonable boundary.\n    max_length = 10**6  # Example boundary condition; adjust as needed.\n    assert len(numbers) <= max_length, f\"Input list 'numbers' should not exceed {max_length} elements.\"\n\n    # Precondition 5: The list should contain at least two distinct values.\n    assert max(numbers) != min(numbers), \"The list must contain at least two distinct values.\"\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    result = list(map(lambda x: (x - mi) * k, numbers))\n\n    # Postcondition 1: The result should be a list of floats.\n    assert isinstance(result, list) and all(isinstance(num, float) for num in result), \"The result must be a list of floats.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(numbers), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: The smallest value in the result list should be 0.0, and the largest value should be 1.0.\n    assert min(result) == 0.0 and max(result) == 1.0, \"The result should have a minimum value of 0.0 and a maximum value of 1.0.\"\n\n    # Postcondition 4: The result list should be monotonically increasing if the input list was sorted.\n    assert all(result[i] <= result[i + 1] for i in range(len(result) - 1)), \"The result list should be monotonically increasing.\"\n\n    return result\n"}
{"id": "HumanEval/22", "code": "# from typing import List, Any\n\n\n# def filter_integers(values: List[Any]) -> List[int]:\n#     \"\"\" Filter given list of any python values only for integers\n#     >>> filter_integers(['a', 3.14, 5])\n#     [5]\n#     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n#     [1, 2, 3]\n#     \"\"\"\n\n\n#     return list(filter(lambda x: type(x) == int, values))\n\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any Python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    # Precondition 1: The input 'values' should not be None.\n    assert values is not None, \"Input 'values' must not be None.\"\n\n    # Precondition 2: The input 'values' should be a list.\n    assert isinstance(values, list), \"Input 'values' must be a list.\"\n\n    result = list(filter(lambda x: type(x) == int, values))\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(x, int) for x in result), \"All elements in the result must be integers.\"\n\n    # Postcondition 2: Ensure that the result only contains integers and no non-integer values.\n    assert all(isinstance(x, int) for x in result), \"The result should only contain integer values.\"\n\n    # Postcondition 3: If the input list contains no integers, the result should be an empty list.\n    if not any(isinstance(x, int) for x in values):\n        assert result == [], \"If the input list contains no integers, the result should be an empty list.\"\n\n    return result\n\n"}
{"id": "HumanEval/23", "code": "\n\n# def strlen(string: str) -> int:\n#     \"\"\" Return length of given string\n#     >>> strlen('')\n#     0\n#     >>> strlen('abc')\n#     3\n#     \"\"\"\n\n\n#     return len(string)\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    result = len(string)\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should accurately represent the length of the input string.\n    assert result == len(string), \"The result should equal the length of the input string.\"\n\n    # Postcondition 3: The result should be non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 4: If the input string is empty, the result should be 0.\n    if string == \"\":\n        assert result == 0, \"If the input string is empty, the result should be 0.\"\n\n    return result\n\n"}
{"id": "HumanEval/24", "code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer greater than 1.\n    assert n > 1, \"Input 'n' must be a positive integer greater than 1.\"\n\n    for i in range(2, n):\n        if n % i == 0: \n            result = n // i\n            break\n    else:\n        result = 1\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be a divisor of 'n' and smaller than 'n'.\n    assert n % result == 0 and result < n, \"The result must be a divisor of 'n' and smaller than 'n'.\"\n\n    # Postcondition 3: The result should be the largest divisor of 'n' smaller than 'n'.\n    for i in range(2, n):\n        if n % i == 0:\n            assert n // i <= result, \"The result should be the largest divisor of 'n' smaller than 'n'.\"\n\n    # Postcondition 4: The result should be greater than 1 if 'n' is greater than 2.\n    if n > 2:\n        assert result > 1, \"The result should be greater than 1 if 'n' is greater than 2.\"\n\n    return result\n"}
{"id": "HumanEval/25", "code": "# from typing import List\n\n\n# def factorize(n: int) -> List[int]:\n#     \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n#     Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n#     Input number should be equal to the product of all factors\n#     >>> factorize(8)\n#     [2, 2, 2]\n#     >>> factorize(25)\n#     [5, 5]\n#     >>> factorize(70)\n#     [2, 5, 7]\n#     \"\"\"\n\n\n#     import math\n#     fact = []\n#     i = 2\n#     while i <= int(math.sqrt(n) + 1):\n#         if n % i == 0:\n#             fact.append(i)\n#             n //= i\n#         else:\n#             i += 1\n\n#     if n > 1:\n#         fact.append(n)\n#     return fact\n\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed the number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer greater than 1.\n    assert n > 1, \"Input 'n' must be a positive integer greater than 1.\"\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(fact, list) and all(isinstance(x, int) for x in fact), \"The result must be a list of integers.\"\n\n    # Postcondition 2: The product of all elements in the result list should equal the original input 'n'.\n    original_n = n\n    product_of_factors = 1\n    for factor in fact:\n        product_of_factors *= factor\n    assert original_n == product_of_factors or original_n == n * product_of_factors, \"The product of the factors should equal the original input 'n'.\"\n\n    # Postcondition 3: All elements in the result list should be prime numbers.\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    assert all(is_prime(x) for x in fact), \"All elements in the result list must be prime numbers.\"\n\n    # Postcondition 4: The factors in the result list should be sorted in ascending order.\n    assert fact == sorted(fact), \"The factors should be sorted in ascending order.\"\n\n    return fact\n"}
{"id": "HumanEval/26", "code": "# from typing import List\n\n\n# def remove_duplicates(numbers: List[int]) -> List[int]:\n#     \"\"\" From a list of integers, remove all elements that occur more than once.\n#     Keep order of elements left the same as in the input.\n#     >>> remove_duplicates([1, 2, 3, 2, 4])\n#     [1, 3, 4]\n#     \"\"\"\n\n\n#     num_cnt = dict()\n#     for number in numbers:\n#         if number not in num_cnt:\n#             num_cnt[number] = 0\n#         num_cnt[number] += 1\n#     return [number for number in numbers if num_cnt[number] == 1]\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep the order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Precondition 1: The input 'numbers' should not be None.\n    assert numbers is not None, \"Input 'numbers' must not be None.\"\n\n    # Precondition 2: The input 'numbers' should be a list of integers.\n    assert isinstance(numbers, list), \"Input 'numbers' must be a list.\"\n    assert all(isinstance(num, int) for num in numbers), \"All elements in 'numbers' must be integers.\"\n\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n\n    result = [number for number in numbers if num_cnt[number] == 1]\n\n    # Postcondition 1: The result should be a list of integers.\n    assert isinstance(result, list) and all(isinstance(num, int) for num in result), \"The result must be a list of integers.\"\n\n    # Postcondition 2: The result should contain only elements that appear exactly once in the input list.\n    assert all(numbers.count(num) == 1 for num in result), \"All elements in the result should appear exactly once in the input list.\"\n\n    # Postcondition 3: The order of elements in the result list should match their first appearance in the input list.\n    for num in result:\n        assert result.index(num) == numbers.index(num), \"The order of elements in the result should match their order in the input list.\"\n\n    # Postcondition 4: If all elements in the input list occur more than once, the result should be an empty list.\n    if all(numbers.count(num) > 1 for num in numbers):\n        assert result == [], \"If all elements in the input list occur more than once, the result should be an empty list.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/27", "code": "\n\n# def flip_case(string: str) -> str:\n#     \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n#     >>> flip_case('Hello')\n#     'hELLO'\n#     \"\"\"\n\n\n#     return \"\".join(map(lambda x: x.swapcase(), string))\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    result = \"\".join(map(lambda x: x.swapcase(), string))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that all lowercase characters are flipped to uppercase and vice versa.\n    for i in range(len(string)):\n        if string[i].isupper():\n            assert result[i].islower(), f\"Character '{string[i]}' should be flipped to lowercase in the result.\"\n        elif string[i].islower():\n            assert result[i].isupper(), f\"Character '{string[i]}' should be flipped to uppercase in the result.\"\n\n    # Postcondition 3: The length of the result string should match the length of the input string.\n    assert len(result) == len(string), \"The length of the result must match the length of the input string.\"\n\n    # Postcondition 4: Ensure that non-alphabetical characters remain unchanged in the result.\n    for i in range(len(string)):\n        if not string[i].isalpha():\n            assert string[i] == result[i], f\"Non-alphabetical character '{string[i]}' should remain unchanged.\"\n\n    return result\n"}
{"id": "HumanEval/28", "code": "# from typing import List\n\n\n# def concatenate(strings: List[str]) -> str:\n#     \"\"\" Concatenate list of strings into a single string\n#     >>> concatenate([])\n#     ''\n#     >>> concatenate(['a', 'b', 'c'])\n#     'abc'\n#     \"\"\"\n\n\n#     return \"\".join(strings)\n\n\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    # Precondition 1: The input 'strings' should not be None.\n    assert strings is not None, \"Input 'strings' must not be None.\"\n\n    # Precondition 2: The input 'strings' should be a list of strings.\n    assert isinstance(strings, list), \"Input 'strings' must be a list.\"\n    assert all(isinstance(s, str) for s in strings), \"All elements in 'strings' must be strings.\"\n\n    result = \"\".join(strings)\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should be the correct concatenation of the input strings.\n    expected_result = \"\".join(strings)\n    assert result == expected_result, f\"The result should be '{expected_result}'.\"\n\n    # Postcondition 3: If the input list is empty, the result should be an empty string.\n    if not strings:\n        assert result == \"\", \"If the input list is empty, the result should be an empty string.\"\n\n    # Postcondition 4: The length of the result should equal the sum of the lengths of the input strings.\n    assert len(result) == sum(len(s) for s in strings), \"The length of the result must equal the sum of the lengths of the input strings.\"\n\n    return result\n"}
{"id": "HumanEval/29", "code": "# from typing import List\n\n\n# def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n#     \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n#     >>> filter_by_prefix([], 'a')\n#     []\n#     >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n#     ['abc', 'array']\n#     \"\"\"\n\n\n#     return list(filter(lambda x: x.startswith(prefix), strings))\n\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    # Precondition 1: The input 'strings' list and 'prefix' should not be None.\n    assert strings is not None, \"Input 'strings' must not be None.\"\n    assert prefix is not None, \"Input 'prefix' must not be None.\"\n\n    # Precondition 2: The input 'strings' should be a list of strings, and 'prefix' should be a string.\n    assert isinstance(strings, list), \"Input 'strings' must be a list.\"\n    assert all(isinstance(s, str) for s in strings), \"All elements in 'strings' must be strings.\"\n    assert isinstance(prefix, str), \"Input 'prefix' must be a string.\"\n\n    result = list(filter(lambda x: x.startswith(prefix), strings))\n\n    # Postcondition 1: The result should be a list of strings.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(s, str) for s in result), \"All elements in the result must be strings.\"\n\n    # Postcondition 2: All strings in the result should start with the specified 'prefix'.\n    assert all(s.startswith(prefix) for s in result), f\"All strings in the result should start with the prefix '{prefix}'.\"\n\n    # Postcondition 3: The length of the result should equal the number of strings in the input that start with the 'prefix'.\n    expected_length = len([s for s in strings if s.startswith(prefix)])\n    assert len(result) == expected_length, \"The length of the result does not match the expected number of strings starting with the prefix.\"\n\n    # Postcondition 4: If the input list is empty or no strings start with the prefix, the result should be an empty list.\n    if not strings or not any(s.startswith(prefix) for s in strings):\n        assert result == [], \"If the input list is empty or no strings start with the prefix, the result should be an empty list.\"\n\n    return result\n\n"}
{"id": "HumanEval/30", "code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be integers or floats.\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    result = list(filter(lambda x: x > 0, l))\n\n    # Postcondition 1: The result should be a list of integers or floats.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(x, (int, float)) for x in result), \"All elements in the result must be integers or floats.\"\n\n    # Postcondition 2: All elements in the result should be positive numbers.\n    assert all(x > 0 for x in result), \"All elements in the result should be positive numbers.\"\n\n    # Postcondition 3: The length of the result should match the number of positive numbers in the input list.\n    expected_length = len([x for x in l if x > 0])\n    assert len(result) == expected_length, \"The length of the result does not match the number of positive numbers in the input list.\"\n\n    # Postcondition 4: If the input list contains no positive numbers, the result should be an empty list.\n    if not any(x > 0 for x in l):\n        assert result == [], \"If the input list contains no positive numbers, the result should be an empty list.\"\n\n    return result\n"}
{"id": "HumanEval/31", "code": "\n\n# def is_prime(n):\n#     \"\"\"Return true if a given number is prime, and false otherwise.\n#     >>> is_prime(6)\n#     False\n#     >>> is_prime(101)\n#     True\n#     >>> is_prime(11)\n#     True\n#     >>> is_prime(13441)\n#     True\n#     >>> is_prime(61)\n#     True\n#     >>> is_prime(4)\n#     False\n#     >>> is_prime(1)\n#     False\n#     \"\"\"\n\n\n#     if n <= 1: return False\n#     n_sqrt = 1\n#     while n_sqrt ** 2 < n: n_sqrt += 1\n#     for i in range(2, min(n_sqrt + 1, n)):\n#         if n % i == 0:\n#             return False\n#     return True\n\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n <= 1: \n        return False\n\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: \n        n_sqrt += 1\n\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    result = True\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: If the result is True, 'n' should have no divisors other than 1 and 'n'.\n    if result:\n        assert all(n % i != 0 for i in range(2, n)), f\"If the result is True, 'n' must have no divisors other than 1 and itself.\"\n\n    # Postcondition 3: If the result is False, 'n' should have at least one divisor other than 1 and 'n'.\n    if not result:\n        assert any(n % i == 0 for i in range(2, n)), f\"If the result is False, 'n' must have at least one divisor other than 1 and itself.\"\n\n    # Postcondition 4: The result should be False for 'n' = 0 or 'n' = 1.\n    if n == 0 or n == 1:\n        assert result == False, \"The result must be False for 'n' = 0 or 'n' = 1.\"\n\n    return result\n"}
{"id": "HumanEval/32", "code": "# import math\n\n\n# def poly(xs: list, x: float):\n#     \"\"\"\n#     Evaluates polynomial with coefficients xs at point x.\n#     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n#     \"\"\"\n#     return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\n# def find_zero(xs: list):\n#     \"\"\" xs are coefficients of a polynomial.\n#     find_zero find x such that poly(x) = 0.\n#     find_zero returns only only zero point, even if there are many.\n#     Moreover, find_zero only takes list xs having even number of coefficients\n#     and largest non zero coefficient as it guarantees\n#     a solution.\n#     >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n#     -0.5\n#     >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n#     1.0\n#     \"\"\"\n\n\n\n#     dxs = [xs[i] * i for i in range(1, len(xs))]\n#     def func(x):\n#         return poly(xs, x)\n#     def derivative(x):\n#         return poly(dxs, x)\n    \n#     x, tol = 0, 1e-5\n#     for _ in range(1000):\n#         fx = func(x)\n#         dfx = derivative(x)\n#         if abs(fx) < tol: break\n#         x = x - fx / dfx\n\n#     return x\n\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... + xs[n] * x^n\n    \"\"\"\n\n    # Precondition 1: The input list 'xs' should not be None.\n    assert xs is not None, \"Input 'xs' must not be None.\"\n\n    # Precondition 2: The input 'xs' should be a list, and 'x' should be a float or integer.\n    assert isinstance(xs, list), \"Input 'xs' must be a list.\"\n    assert isinstance(x, (int, float)), \"Input 'x' must be a float or an integer.\"\n\n    # Precondition 3: All elements in the list 'xs' should be integers or floats.\n    assert all(isinstance(coeff, (int, float)) for coeff in xs), \"All elements in 'xs' must be integers or floats.\"\n\n    result = sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    # Postcondition 1: The result should be a float.\n    assert isinstance(result, (float, int)), \"The result must be a float or an integer.\"\n\n    return result\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Precondition 1: The input list 'xs' should not be None.\n    assert xs is not None, \"Input 'xs' must not be None.\"\n\n    # Precondition 2: The input 'xs' should be a list of numbers.\n    assert isinstance(xs, list), \"Input 'xs' must be a list.\"\n    assert all(isinstance(coeff, (int, float)) for coeff in xs), \"All elements in 'xs' must be integers or floats.\"\n\n    # Precondition 3: The length of 'xs' should be even.\n    assert len(xs) % 2 == 0, \"The length of 'xs' must be even.\"\n\n    # Precondition 4: The highest degree coefficient should be non-zero.\n    assert xs[-1] != 0, \"The highest degree coefficient must be non-zero.\"\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n\n    def func(x):\n        return poly(xs, x)\n\n    def derivative(x):\n        return poly(dxs, x)\n\n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol:\n            break\n        x = x - fx / dfx\n\n    # Postcondition 1: The result should be a float.\n    assert isinstance(x, (float, int)), \"The result must be a float or an integer.\"\n\n    # Postcondition 2: The result should satisfy poly(xs, x) = 0 within the specified tolerance.\n    assert abs(func(x)) < tol, \"The result does not satisfy poly(xs, x) = 0 within the specified tolerance.\"\n\n    return x\n\n"}
{"id": "HumanEval/33", "code": "\n\n# def sort_third(l: list):\n#     \"\"\"This function takes a list l and returns a list l' such that\n#     l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n#     to the values of the corresponding indicies of l, but sorted.\n#     >>> sort_third([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n#     [2, 6, 3, 4, 8, 9, 5]\n#     \"\"\"\n\n\n#     third = [l[i] for i in range(len(l)) if i % 3 == 0]\n#     third.sort()\n#     return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be comparable (e.g., integers, floats).\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n\n    result = [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(l), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: The elements at indices divisible by 3 should be sorted in the result list.\n    assert all(result[i] == third[i // 3] for i in range(len(l)) if i % 3 == 0), \"The elements at indices divisible by 3 should be sorted in the result list.\"\n\n    # Postcondition 4: The elements at indices not divisible by 3 should remain unchanged.\n    assert all(result[i] == l[i] for i in range(len(l)) if i % 3 != 0), \"The elements at indices not divisible by 3 should remain unchanged.\"\n\n    return result\n"}
{"id": "HumanEval/34", "code": "\n\n# def unique(l: list):\n#     \"\"\"Return sorted unique elements in a list\n#     >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [0, 2, 3, 5, 9, 123]\n#     \"\"\"\n\n\n#     return sorted(set(l))\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be hashable.\n    assert all(isinstance(x, (int, float, str, tuple)) for x in l), \"All elements in 'l' must be hashable (e.g., int, float, str, tuple).\"\n\n    result = sorted(set(l))\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The result should contain only unique elements from the input list, sorted in ascending order.\n    assert result == sorted(set(l)), \"The result should contain only unique elements from the input list, sorted in ascending order.\"\n\n    # Postcondition 3: The length of the result list should be less than or equal to the length of the input list.\n    assert len(result) <= len(l), \"The length of the result list should be less than or equal to the length of the input list.\"\n\n    return result\n"}
{"id": "HumanEval/35", "code": "\n\n# def max_element(l: list):\n#     \"\"\"Return maximum element in the list.\n#     >>> max_element([1, 2, 3])\n#     3\n#     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n#     123\n#     \"\"\"\n\n\n#     assert all(type(x) in [int, float] for x in l), \"invalid inputs\"\n#     return max(l)\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: The input list 'l' should not be empty.\n    assert len(l) > 0, \"Input list 'l' must not be empty.\"\n\n    # Precondition 4: All elements in the list 'l' should be integers or floats.\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    result = max(l)\n\n    # Postcondition 1: The result should be an integer or a float.\n    assert isinstance(result, (int, float)), \"The result must be an integer or a float.\"\n\n    # Postcondition 2: The result should be the maximum value in the list.\n    assert result == max(l), \"The result must be the maximum value in the list.\"\n\n    return result\n"}
{"id": "HumanEval/36", "code": "\n\n# def fizz_buzz(n: int):\n#     \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#     >>> fizz_buzz(50)\n#     0\n#     >>> fizz_buzz(78)\n#     2\n#     >>> fizz_buzz(79)\n#     3\n#     \"\"\"\n\n\n#     cnt = 0\n#     for i in range(n):\n#         if i % 11 == 0 or i % 13 == 0:\n#             cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n#     return cnt\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer greater than 0.\n    assert n > 0, \"Input 'n' must be a positive integer greater than 0.\"\n\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    \n    # Postcondition 1: The result should be an integer.\n    assert isinstance(cnt, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be a non-negative integer.\n    assert cnt >= 0, \"The result must be a non-negative integer.\"\n\n    # Postcondition 3: The result should correctly count the occurrences of '7' in numbers divisible by 11 or 13.\n    expected_count = sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n    assert cnt == expected_count, \"The result should correctly count the occurrences of '7'.\"\n\n    return cnt\n\n\n"}
{"id": "HumanEval/37", "code": "\n\n# def sort_even(l: list):\n#     \"\"\"This function takes a list l and returns a list l' such that\n#     l' is identical to l in the odd indicies, while its values at the even indicies are equal\n#     to the values of the even indicies of l, but sorted.\n#     >>> sort_even([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_even([5, 6, 3, 4])\n#     [3, 6, 5, 4]\n#     \"\"\"\n\n\n#     even = [l[i] for i in range(len(l)) if i % 2 == 0]\n#     even.sort()\n#     return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be comparable (e.g., integers, floats).\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n\n    result = [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(l), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: The elements at even indices should be sorted in the result list.\n    assert all(result[i] <= result[i + 2] for i in range(0, len(even) - 1, 2)), \"The elements at even indices should be sorted in the result list.\"\n\n    # Postcondition 4: The elements at odd indices should remain unchanged.\n    assert all(result[i] == l[i] for i in range(1, len(l), 2)), \"The elements at odd indices should remain unchanged.\"\n\n    return result\n"}
{"id": "HumanEval/38", "code": "\n\n# def encode_cyclic(s: str):\n#     \"\"\"\n#     returns encoded string by cycling groups of three characters.\n#     \"\"\"\n#     # split string to groups. Each of length 3.\n#     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#     # cycle elements in each group. Unless group has fewer elements than 3.\n#     groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n#     return \"\".join(groups)\n\n\n# def decode_cyclic(s: str):\n#     \"\"\"\n#     takes as input string encoded with encode_cyclic function. Returns decoded string.\n#     \"\"\"\n\n\n#     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#     groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n#     return \"\".join(groups)\ndef encode_cyclic(s: str):\n    \"\"\"\n    Returns an encoded string by cycling groups of three characters.\n    \"\"\"\n    \n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Split string into groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group, unless the group has fewer than three elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    result = \"\".join(groups)\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    return result\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \"\"\"\n    \n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Split string into groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse the cycle in each group, unless the group has fewer than three elements.\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    result = \"\".join(groups)\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    return result\n\n\n\n\n"}
{"id": "HumanEval/39", "code": "\n\n# def prime_fib(n: int):\n#     \"\"\"\n#     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n#     >>> prime_fib(1)\n#     2\n#     >>> prime_fib(2)\n#     3\n#     >>> prime_fib(3)\n#     5\n#     >>> prime_fib(4)\n#     13\n#     >>> prime_fib(5)\n#     89\n#     \"\"\"\n\n\n\n#     import random\n#     def miller_rabin(n, k=10):\n#         \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n#         if n < 2:\n#             return False\n#         if n == 2 or n == 3:\n#             return True\n#         if n % 2 == 0:\n#             return False\n\n#         r = 0\n#         d = n - 1\n#         while d % 2 == 0:\n#             r += 1\n#             d //= 2\n\n#         for _ in range(k):\n#             a = random.randint(2, n - 2)\n#             x = pow(a, d, n)\n#             if x == 1 or x == n - 1:\n#                 continue\n#             for _ in range(r - 1):\n#                 x = pow(x, 2, n)\n#                 if x == n - 1:\n#                     break\n#             else:\n#                 return False\n\n#         return True\n\n#     c_prime = 0\n#     a, b = 0, 1\n#     while c_prime < n:\n#         a, b = b, a + b\n#         if miller_rabin(b):\n#             c_prime += 1\n#     return b\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns the n-th number that is a Fibonacci number and is also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer greater than 0.\n    assert n > 0, \"Input 'n' must be a positive integer greater than 0.\"\n\n    import random\n\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(b, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be a prime Fibonacci number.\n    assert miller_rabin(b), \"The result must be a prime number.\"\n    assert b == a + b - a, \"The result must be a Fibonacci number.\"\n\n    return b\n\n"}
{"id": "HumanEval/40", "code": "\n\n# def triples_sum_to_zero(l: list):\n#     \"\"\"\n#     triples_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are three distinct elements in the list that\n#     sum to zero, and False otherwise.\n\n#     >>> triples_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> triples_sum_to_zero([1, 3, -2, 1])\n#     True\n#     >>> triples_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n#     True\n#     >>> triples_sum_to_zero([1])\n#     False\n#     \"\"\"\n\n\n#     for i in range(len(l)):\n#         for j in range(len(l)):\n#             for k in range(len(l)):\n#                 if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n#                     return True\n#     return False\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be integers.\n    assert all(isinstance(x, int) for x in l), \"All elements in 'l' must be integers.\"\n\n    n = len(l)\n    l.sort()\n\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    # Postcondition 1: The result should be a boolean value.\n    result = False\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    return result\n\n"}
{"id": "HumanEval/41", "code": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n\n    # Precondition: Ensure n is a positive integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n    return n ** 2\n\n\n"}
{"id": "HumanEval/42", "code": "\n\n# def incr_list(l: list):\n#     \"\"\"Return list with elements incremented by 1.\n#     >>> incr_list([1, 2, 3])\n#     [2, 3, 4]\n#     >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [6, 4, 6, 3, 4, 4, 10, 1, 124]\n#     \"\"\"\n\n\n#     return [x + 1 for x in l]\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be integers.\n    assert all(isinstance(x, int) for x in l), \"All elements in 'l' must be integers.\"\n\n    result = [x + 1 for x in l]\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Each element in the result should be exactly 1 greater than the corresponding element in the input list.\n    assert all(result[i] == l[i] + 1 for i in range(len(l))), \"Each element in the result must be 1 greater than in the input list.\"\n\n    return result\n"}
{"id": "HumanEval/43", "code": "\n\n# def pairs_sum_to_zero(l):\n#     \"\"\"\n#     pairs_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are two distinct elements in the list that\n#     sum to zero, and False otherwise.\n#     >>> pairs_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> pairs_sum_to_zero([1, 3, -2, 1])\n#     False\n#     >>> pairs_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n#     True\n#     >>> pairs_sum_to_zero([1])\n#     False\n#     \"\"\"\n\n\n#     for i in range(len(l)):\n#         for j in range(len(l)):\n#             if i != j and l[i] + l[j] == 0:\n#                 return True\n#     return False\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be integers.\n    assert all(isinstance(x, int) for x in l), \"All elements in 'l' must be integers.\"\n\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    # Postcondition 1: The result should be a boolean value.\n    result = False\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    return result\n\n"}
{"id": "HumanEval/44", "code": "\n\n# def change_base(x: int, base: int):\n#     \"\"\"Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\n#     \"\"\"\n\n\n\n#     if x == 0: return \"0\"\n#     ret = \"\"\n#     while x != 0:\n#         ret = str(x % base) + ret\n#         x //= base\n#     return ret\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change the numerical base of input number x to the specified base.\n    Returns the string representation after the conversion.\n    The base must be between 2 and 10 (inclusive).\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Precondition 1: The inputs 'x' and 'base' should not be None.\n    assert x is not None and base is not None, \"Input 'x' and 'base' must not be None.\"\n\n    # Precondition 2: The inputs 'x' and 'base' should be integers.\n    assert isinstance(x, int) and isinstance(base, int), \"Input 'x' and 'base' must be integers.\"\n\n    # Precondition 3: The 'base' should be greater than 1 and less than or equal to 10.\n    assert 2 <= base <= 10, \"Base must be between 2 and 10 (inclusive).\"\n\n    # Precondition 4: The input 'x' should be a non-negative integer.\n    assert x >= 0, \"Input 'x' must be a non-negative integer.\"\n\n    if x == 0:\n        return \"0\"\n    \n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(ret, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should correctly represent 'x' in the given 'base'.\n    assert int(ret, base) == change_base_to_decimal(ret, base), \"The conversion back to decimal should yield the original number.\"\n\n    return ret\n\ndef change_base_to_decimal(s: str, base: int):\n    \"\"\"Helper function to convert a string in a given base back to a decimal integer.\"\"\"\n    return int(s, base)\n"}
{"id": "HumanEval/45", "code": "\n\n# def triangle_area(a, h):\n#     \"\"\"Given length of a side and high return area for a triangle.\n#     >>> triangle_area(5, 3)\n#     7.5\n#     \"\"\"\n\n\n\n#     return a * h / 2\n\n\ndef triangle_area(a, h):\n    \"\"\"Given the length of a side and height, return the area of a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    # Precondition 1: The inputs 'a' and 'h' should not be None.\n    assert a is not None and h is not None, \"Inputs 'a' and 'h' must not be None.\"\n\n    # Precondition 2: The inputs 'a' and 'h' should be numeric (either integers or floats).\n    assert isinstance(a, (int, float)) and isinstance(h, (int, float)), \"Inputs 'a' and 'h' must be numeric (int or float).\"\n\n    # Precondition 3: The inputs 'a' and 'h' should be positive.\n    assert a > 0 and h > 0, \"Inputs 'a' and 'h' must be positive.\"\n\n    result = a * h / 2\n\n    # Postcondition 1: The result should be a float.\n    assert isinstance(result, float), \"The result must be a float.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The area of a triangle must be non-negative.\"\n\n    return result\n"}
{"id": "HumanEval/46", "code": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(d, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should correctly follow the Fib4 sequence.\n    if n == 4:\n        assert d == 2, \"For n=4, the result should be 2.\"\n    elif n == 5:\n        assert d == 4, \"For n=5, the result should be 4.\"\n\n    return d\n"}
{"id": "HumanEval/47", "code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: The input list 'l' should not be empty.\n    assert len(l) > 0, \"Input list 'l' must not be empty.\"\n\n    # Precondition 4: All elements in the list 'l' should be numeric (either integers or floats).\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be numeric (int or float).\"\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        result = sorted_l[len(l) // 2]\n    else:\n        result = (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n    # Postcondition 1: The result should be either an integer or a float.\n    assert isinstance(result, (int, float)), \"The result must be an integer or a float.\"\n\n    # Postcondition 2: The result should be the correct median value.\n    if len(l) % 2 == 1:\n        expected_median = sorted_l[len(l) // 2]\n        assert result == expected_median, \"The result must be the correct median for an odd-length list.\"\n    else:\n        expected_median = (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n        assert result == expected_median, \"The result must be the correct median for an even-length list.\"\n\n    return result\n"}
{"id": "HumanEval/48", "code": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Precondition 1: The input 'text' should not be None.\n    assert text is not None, \"Input 'text' must not be None.\"\n\n    # Precondition 2: The input 'text' should be a string.\n    assert isinstance(text, str), \"Input 'text' must be a string.\"\n\n    result = text == text[::-1]\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should be True if and only if 'text' is a palindrome.\n\n    assert text == text[::-1], \"The result must be False if 'text' is not a palindrome.\"\n\n    return result\n"}
{"id": "HumanEval/49", "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # Precondition 1: The inputs 'n' and 'p' should not be None.\n    assert n is not None and p is not None, \"Inputs 'n' and 'p' must not be None.\"\n\n    # Precondition 2: The inputs 'n' and 'p' should be integers.\n    assert isinstance(n, int) and isinstance(p, int), \"Inputs 'n' and 'p' must be integers.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    # Precondition 4: The input 'p' should be a positive integer.\n    assert p > 0, \"Input 'p' must be a positive integer.\"\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n\n    result = res % p\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should satisfy the condition 2^n % p.\n    expected_result = pow(2, n, p)\n    assert result == expected_result, f\"The result {result} does not match the expected result {expected_result}.\"\n\n    return result\n\n"}
{"id": "HumanEval/50", "code": "def encode_shift(s: str):\n    \"\"\"\n    Returns an encoded string by shifting every character by 5 in the alphabet.\n    Assumes that the input string consists of lowercase alphabetic characters only.\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: All characters in 's' should be lowercase alphabetic characters.\n    assert all('a' <= ch <= 'z' for ch in s), \"All characters in 's' must be lowercase alphabetic characters.\"\n\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function and returns the decoded string.\n    Assumes that the input string consists of lowercase alphabetic characters only.\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: All characters in 's' should be lowercase alphabetic characters.\n    assert all('a' <= ch <= 'z' for ch in s), \"All characters in 's' must be lowercase alphabetic characters.\"\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\n# Postcondition: Ensure that encoding and then decoding returns the original string.\ndef test_encode_decode_shift():\n    original_strings = [\"abc\", \"xyz\", \"hello\", \"world\", \"az\"]\n    for s in original_strings:\n        encoded = encode_shift(s)\n        decoded = decode_shift(encoded)\n        assert s == decoded, f\"Failed for original string: {s}, decoded as: {decoded}\"\n\ntest_encode_decode_shift()\n"}
{"id": "HumanEval/51", "code": "\n\n# def remove_vowels(text):\n#     \"\"\"\n#     remove_vowels is a function that takes string and returns string without vowels.\n#     >>> remove_vowels('')\n#     ''\n#     >>> remove_vowels(\"abcdef\\nghijklm\")\n#     'bcdf\\nghjklm'\n#     >>> remove_vowels('abcdef')\n#     'bcdf'\n#     >>> remove_vowels('aaaaa')\n#     ''\n#     >>> remove_vowels('aaBAA')\n#     'B'\n#     >>> remove_vowels('zbcd')\n#     'zbcd'\n#     \"\"\"\n\n\n#     return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    # Precondition 1: The input string 'text' should not be None.\n    assert text is not None, \"Input 'text' must not be None.\"\n\n    # Precondition 2: The input 'text' should be a string.\n    assert isinstance(text, str), \"Input 'text' must be a string.\"\n\n    vowels = \"aeiouAEIOU\"\n    result = \"\".join([ch for ch in text if ch not in vowels])\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should not contain any vowels.\n    assert all(ch not in vowels for ch in result), \"The result should not contain any vowels.\"\n\n    return result\n"}
{"id": "HumanEval/52", "code": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    # Precondition 1: The input list 'l' and threshold 't' should not be None.\n    assert l is not None and t is not None, \"Inputs 'l' and 't' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: The threshold 't' should be an integer or float.\n    assert isinstance(t, (int, float)), \"Input 't' must be an integer or float.\"\n\n    # Precondition 4: All elements in the list 'l' should be integers or floats.\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    result = all(x < t for x in l)\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should be True if and only if all elements in 'l' are below the threshold 't'.\n    assert result == all(x < t for x in l), \"The result must correctly reflect whether all elements are below the threshold.\"\n\n    return result\n"}
{"id": "HumanEval/53", "code": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n    # Precondition 1: The inputs 'x' and 'y' should not be None.\n    assert x is not None and y is not None, \"Inputs 'x' and 'y' must not be None.\"\n\n    # Precondition 2: The inputs 'x' and 'y' should be integers.\n    assert isinstance(x, int) and isinstance(y, int), \"Inputs 'x' and 'y' must be integers.\"\n\n    result = x + y\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be equal to the sum of 'x' and 'y'.\n    assert result == x + y, \"The result must equal the sum of 'x' and 'y'.\"\n\n    return result\n"}
{"id": "HumanEval/54", "code": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Precondition 1: The inputs 's0' and 's1' should not be None.\n    assert s0 is not None and s1 is not None, \"Inputs 's0' and 's1' must not be None.\"\n\n    # Precondition 2: The inputs 's0' and 's1' should be strings.\n    assert isinstance(s0, str) and isinstance(s1, str), \"Inputs 's0' and 's1' must be strings.\"\n\n    result = set(s0) == set(s1)\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should be True if and only if both strings have the same unique characters.\n    assert result == (set(s0) == set(s1)), \"The result must correctly reflect whether both strings have the same unique characters.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/55", "code": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n == 0:\n        return 0\n    if n <= 2:\n        return 1\n    \n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n\n    result = b\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be the correct n-th Fibonacci number.\n    # Verifying correctness by checking if the result matches a small set of known Fibonacci numbers\n    known_fibs = {0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55}\n    if n in known_fibs:\n        assert result == known_fibs[n], f\"The result must be {known_fibs[n]} for n={n}.\"\n\n    return result\n"}
{"id": "HumanEval/56", "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    # Precondition 1: The input 'brackets' should not be None.\n    assert brackets is not None, \"Input 'brackets' must not be None.\"\n\n    # Precondition 2: The input 'brackets' should be a string.\n    assert isinstance(brackets, str), \"Input 'brackets' must be a string.\"\n\n    # Precondition 3: The input 'brackets' should contain only '<' and '>'.\n    assert all(ch in \"<>\" for ch in brackets), \"Input 'brackets' must contain only '<' and '>'.\"\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\":\n            cnt += 1\n        if x == \">\":\n            cnt -= 1\n        if cnt < 0:\n            return False\n\n    result = cnt == 0\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should correctly indicate whether the brackets are balanced.\n    if result:\n        assert cnt == 0, \"If the result is True, the count of '<' and '>' must be balanced.\"\n    else:\n        assert cnt != 0 or any(brackets[i] == \">\" and brackets[i - 1] == \"<\" for i in range(1, len(brackets))), \"If the result is False, the brackets are unbalanced.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/57", "code": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # Precondition 1: The input list 'l' should not be None.\n    assert l is not None, \"Input list 'l' must not be None.\"\n\n    # Precondition 2: The input 'l' should be a list.\n    assert isinstance(l, list), \"Input 'l' must be a list.\"\n\n    # Precondition 3: All elements in the list 'l' should be comparable (e.g., integers or floats).\n    assert all(isinstance(x, (int, float)) for x in l), \"All elements in 'l' must be integers or floats.\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n\n    result = inc or dec\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should correctly reflect the monotonicity of the list.\n    if result:\n        assert inc or dec, \"The list must be either monotonically increasing or decreasing.\"\n    else:\n        assert not (inc or dec), \"The list must not be monotonically increasing or decreasing.\"\n\n    # Postcondition 3: The result should be True for an empty list (trivially monotonic).\n    if len(l) == 0:\n        assert result is True, \"The result must be True for an empty list.\"\n\n    # Postcondition 4: The result should be True for a single-element list (trivially monotonic).\n    if len(l) == 1:\n        assert result is True, \"The result must be True for a single-element list.\"\n\n    # Postcondition 5: If the list is strictly increasing, the result must be True.\n    if all(l[i] < l[i + 1] for i in range(len(l) - 1)):\n        assert result is True, \"The result must be True for a strictly increasing list.\"\n\n    # Postcondition 6: If the list is strictly decreasing, the result must be True.\n    if all(l[i] > l[i + 1] for i in range(len(l) - 1)):\n        assert result is True, \"The result must be True for a strictly decreasing list.\"\n\n    # Postcondition 7: If the list is not monotonic, the result must be False.\n    if any(l[i] < l[i + 1] for i in range(len(l) - 1)) and any(l[i] > l[i + 1] for i in range(len(l) - 1)):\n        assert result is False, \"The result must be False for a non-monotonic list.\"\n\n    return result\n\n"}
{"id": "HumanEval/58", "code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n\n    # Precondition 1: The input lists 'l1' and 'l2' should not be None.\n    assert l1 is not None and l2 is not None, \"Input lists 'l1' and 'l2' must not be None.\"\n\n    # Precondition 2: The inputs 'l1' and 'l2' should be lists.\n    assert isinstance(l1, list) and isinstance(l2, list), \"Inputs 'l1' and 'l2' must be lists.\"\n\n    # Precondition 3: All elements in 'l1' and 'l2' should be hashable.\n    assert all(isinstance(x, (int, float, str, tuple)) for x in l1 + l2), \"All elements in 'l1' and 'l2' must be hashable.\"\n\n    result = sorted(list(set(l1).intersection(set(l2))))\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The result should be sorted.\n    assert result == sorted(result), \"The result must be sorted.\"\n\n    # Postcondition 3: The result should contain only unique elements.\n    assert len(result) == len(set(result)), \"The result must contain only unique elements.\"\n\n    # Postcondition 4: The result should contain only elements common to both 'l1' and 'l2'.\n    assert all(elem in l1 and elem in l2 for elem in result), \"The result must contain only elements that are common to both 'l1' and 'l2'.\"\n\n    return result\n"}
{"id": "HumanEval/59", "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        n //= 2\n    \n    # If the result is 1, then 2 is the largest prime factor\n    if n == 1:\n        return 2\n    \n    # Now n is odd. Check divisibility by odd numbers starting from 3.\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 2\n    \n    # If n is still greater than 2, then it's prime and the largest factor.\n    if n > 2:\n        return n\n    return factor\n"}
{"id": "HumanEval/60", "code": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer.\n    assert n > 0, \"Input 'n' must be a positive integer.\"\n\n    result = (n + 1) * n // 2\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should match the expected sum.\n    expected_result = sum(range(1, n + 1))\n    assert result == expected_result, f\"The result {result} does not match the expected sum {expected_result}.\"\n\n    return result\n"}
{"id": "HumanEval/61", "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    # Precondition 1: The input 'brackets' should not be None.\n    assert brackets is not None, \"Input 'brackets' must not be None.\"\n\n    # Precondition 2: The input 'brackets' should be a string.\n    assert isinstance(brackets, str), \"Input 'brackets' must be a string.\"\n\n    # Precondition 3: The input 'brackets' should contain only '(' and ')'.\n    assert all(ch in \"()\" for ch in brackets), \"Input 'brackets' must contain only '(' and ')'.\"\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\":\n            cnt += 1\n        if x == \")\":\n            cnt -= 1\n        if cnt < 0:\n            return False\n\n    result = cnt == 0\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: The result should correctly reflect the bracketing balance.\n    if result:\n        assert cnt == 0, \"If the result is True, the count of '(' and ')' must be balanced.\"\n    else:\n        assert cnt != 0, \"If the result is False, the count of '(' and ')' must not be balanced.\"\n\n    # Postcondition 3: The result should be True for an empty string (trivially balanced).\n    if brackets == \"\":\n        assert result is True, \"The result must be True for an empty string.\"\n\n    return result\n"}
{"id": "HumanEval/62", "code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    # Precondition 1: The input list 'xs' should not be None.\n    assert xs is not None, \"Input list 'xs' must not be None.\"\n\n    # Precondition 2: The input 'xs' should be a list.\n    assert isinstance(xs, list), \"Input 'xs' must be a list.\"\n\n    # Precondition 3: All elements in 'xs' should be numeric (int or float).\n    assert all(isinstance(x, (int, float)) for x in xs), \"All elements in 'xs' must be numeric (int or float).\"\n\n    result = [xs[i] * i for i in range(1, len(xs))]\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The length of the result should be one less than the length of 'xs'.\n    assert len(result) == len(xs) - 1, \"The length of the result must be one less than the length of 'xs'.\"\n\n    # Postcondition 3: The result should correctly represent the derivative.\n    expected_result = [i * xs[i] for i in range(1, len(xs))]\n    assert result == expected_result, \"The result must correctly represent the derivative of the polynomial.\"\n\n    return result\n"}
{"id": "HumanEval/63", "code": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n\n    result = c\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Check base cases\n    if n == 0 or n == 1:\n        assert result == 0, f\"For n = {n}, the result should be 0.\"\n    elif n == 2:\n        assert result == 1, \"For n = 2, the result should be 1.\"\n\n    # Postcondition 3: Correctness check for larger n.\n    if n > 2:\n        assert result == fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3), \"The result must satisfy the fibfib recurrence relation.\"\n\n    return result\n"}
{"id": "HumanEval/64", "code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    if s == \"\":\n        return 0\n    \n    cnt = len([ch for ch in s if ch in \"aeiouAEIOU\"])\n    if s[-1] in \"yY\":\n        cnt += 1\n    \n    # Postcondition 1: The result should be an integer.\n    assert isinstance(cnt, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert cnt >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 3: The result should be 0 for an empty string.\n    if s == \"\":\n        assert cnt == 0, \"The result must be 0 for an empty string.\"\n\n    # Postcondition 4: The count should match the expected number of vowels.\n    expected_count = len([ch for ch in s if ch in \"aeiouAEIOU\"])\n    if s[-1] in \"yY\":\n        expected_count += 1\n    assert cnt == expected_count, f\"The count {cnt} does not match the expected count {expected_count}.\"\n\n    return cnt\n\n"}
{"id": "HumanEval/65", "code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n\n    # Precondition 1: The inputs 'x' and 'shift' should not be None.\n    assert x is not None and shift is not None, \"Inputs 'x' and 'shift' must not be None.\"\n\n    # Precondition 2: The input 'x' should be an integer and 'shift' should be an integer.\n    assert isinstance(x, int), \"Input 'x' must be an integer.\"\n    assert isinstance(shift, int), \"Input 'shift' must be an integer.\"\n\n    # Precondition 3: The input 'shift' should be a non-negative integer.\n    assert shift >= 0, \"Input 'shift' must be a non-negative integer.\"\n\n    s = str(x)\n    if shift > len(s):\n        result = s[::-1]\n    else:\n        shift %= len(s)\n        if shift == 0:\n            result = s\n        else:\n            result = s[-shift:] + s[:-shift]\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should correctly reflect the circular shift or reversal logic.\n    if shift > len(s):\n        assert result == s[::-1], \"The result should be the reverse of 'x' as a string when shift > number of digits.\"\n    else:\n        expected_result = s[-shift:] + s[:-shift]\n        assert result == expected_result, \"The result should be the correct circular shift of 'x'.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/66", "code": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    result = sum(ord(ch) for ch in s if ch.isupper())\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be the sum of the ASCII codes of uppercase characters in the string.\n    expected_sum = sum(ord(ch) for ch in s if ch.isupper())\n    assert result == expected_sum, \"The result must correctly sum the ASCII codes of the uppercase characters.\"\n\n    return result\n"}
{"id": "HumanEval/67", "code": "def fruit_distribution(s: str, n: int):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n\n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Precondition 1: The input string 's' and integer 'n' should not be None.\n    assert s is not None and n is not None, \"Inputs 's' and 'n' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string and 'n' should be an integer.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The number of fruits should be non-negative.\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert c1 >= 0 and c2 >= 0 and n >= 0, \"The number of fruits must be non-negative integers.\"\n    assert n - c1 - c2 >= 0, \"The total number of fruits must be at least the sum of apples and oranges.\"\n\n    result = n - c1 - c2\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result (number of mangoes) should be non-negative.\n    assert result >= 0, \"The number of mangoes cannot be negative.\"\n\n    # Postcondition 3: The sum of apples, oranges, and mangoes should equal the total number of fruits.\n    assert c1 + c2 + result == n, \"The sum of apples, oranges, and mangoes must equal the total number of fruits.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/68", "code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n    \"\"\"\n\n    # Precondition: Check that the input 'arr' is a list and contains non-negative integers.\n    assert isinstance(arr, list), \"Input must be a list.\"\n    assert all(isinstance(x, int) and x >= 0 for x in arr), \"All elements in the list must be non-negative integers.\"\n\n    if not arr:  # If the array is empty, return []\n        return []\n\n    min_even = None\n    min_index = None\n\n    for i, val in enumerate(arr):\n        if val % 2 == 0:  # Check if the value is even\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n\n    if min_even is not None:\n        return [min_even, min_index]\n    else:\n        return []\n\n# Postcondition: The result should be a list and should match the expected format and values.\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1], \"Test Case 1 Failed\"\n    assert pluck([1, 2, 3]) == [2, 1], \"Test Case 2 Failed\"\n    assert pluck([]) == [], \"Test Case 3 Failed\"\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], \"Test Case 4 Failed\"\n    assert pluck([5, 7, 3]) == [], \"Test Case 5 Failed\"  # No even numbers\n\ntest_pluck()\n\n"}
{"id": "HumanEval/69", "code": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # Precondition 1: The input 'lst' should not be None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: All elements in 'lst' should be positive integers.\n    assert all(isinstance(x, int) and x > 0 for x in lst), \"All elements in 'lst' must be positive integers.\"\n\n    count = dict()\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    \n    # Postcondition 1: The result should be an integer.\n    assert isinstance(ans, int), \"The result must be an integer.\"\n\n    # Postcondition 2: If no number meets the criteria, the result should be -1.\n    if ans == -1:\n        assert all(count[num] < num for num in count), \"If result is -1, no number in 'lst' should meet the criteria.\"\n\n    return ans\n\n\n"}
{"id": "HumanEval/70", "code": "def strange_sort_list(lst):\n    '''\n    Given a list of integers, return the list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then the maximum of the remaining integers, then the next minimum, and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Precondition 1: The input 'lst' should not be None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: All elements in 'lst' should be integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    sorted_list = sorted(lst)\n    ans = []\n    i, j = 0, len(sorted_list) - 1\n\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n\n    if i == j:  # If there's one element left in the middle\n        ans.append(sorted_list[i])\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure the list is sorted in the strange order.\n    assert len(ans) == len(lst), \"The result list must have the same number of elements as the input list.\"\n\n    return ans\n"}
{"id": "HumanEval/71", "code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise, return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Precondition 1: The inputs 'a', 'b', and 'c' should not be None.\n    assert a is not None and b is not None and c is not None, \"Sides 'a', 'b', and 'c' must not be None.\"\n\n    # Precondition 2: The inputs 'a', 'b', and 'c' should be numeric (int or float).\n    assert isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float)), \\\n        \"Sides 'a', 'b', and 'c' must be numeric (int or float).\"\n\n    # Precondition 3: The inputs 'a', 'b', and 'c' should be positive.\n    assert a > 0 and b > 0 and c > 0, \"Sides 'a', 'b', and 'c' must be positive numbers.\"\n\n    # Check for a valid triangle using the triangle inequality theorem\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    p = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula and round it to 2 decimal places\n    area = round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n    # Postcondition 1: The result should be a float if valid, otherwise -1.\n    assert isinstance(area, float) or area == -1, \"The result must be a float (for area) or -1 (for invalid triangle).\"\n\n    return area\n"}
{"id": "HumanEval/72", "code": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    will_it_fly([3, 2, 3], 1) \u279e False\n    will_it_fly([3, 2, 3], 9) \u279e True\n    will_it_fly([3], 5) \u279e True\n    '''\n\n    # Precondition 1: The inputs 'q' and 'w' should not be None.\n    assert q is not None and w is not None, \"Inputs 'q' and 'w' must not be None.\"\n\n    # Precondition 2: The input 'q' should be a list and 'w' should be an integer or float.\n    assert isinstance(q, list), \"Input 'q' must be a list.\"\n    assert isinstance(w, (int, float)), \"Input 'w' must be an integer or float.\"\n\n    # Precondition 3: All elements in 'q' should be integers or floats.\n    assert all(isinstance(x, (int, float)) for x in q), \"All elements in 'q' must be integers or floats.\"\n\n    # Precondition 4: The maximum weight 'w' should be non-negative.\n    assert w >= 0, \"The maximum weight 'w' must be non-negative.\"\n\n    # Check if 'q' is a palindrome and if the sum of elements is less than or equal to 'w'\n    result = q == q[::-1] and sum(q) <= w\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    return result\n"}
{"id": "HumanEval/73", "code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Precondition 1: The input 'arr' should not be None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: The input 'arr' should be a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: All elements in 'arr' should be integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    cnt = 0\n    n = len(arr)\n    \n    # Compare elements from the start to the corresponding elements from the end\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            cnt += 1\n    \n    # Postcondition 1: The result should be a non-negative integer.\n    assert isinstance(cnt, int) and cnt >= 0, \"The result must be a non-negative integer.\"\n\n    return cnt\n"}
{"id": "HumanEval/74", "code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Preconditions\n    assert isinstance(lst1, list) and all(isinstance(s, str) for s in lst1), \"lst1 must be a list of strings.\"\n    assert isinstance(lst2, list) and all(isinstance(s, str) for s in lst2), \"lst2 must be a list of strings.\"\n    \n    # Compute total character counts\n    c1 = sum(len(s) for s in lst1)\n    c2 = sum(len(s) for s in lst2)\n    \n    # Determine the result\n    result = lst1 if c1 <= c2 else lst2\n    \n    # Postconditions\n    assert isinstance(result, list), \"Result must be a list.\"\n    assert all(isinstance(s, str) for s in result), \"All elements in the result list must be strings.\"\n    assert sum(len(s) for s in result) <= max(c1, c2), \"The total number of characters in the result list should be less than or equal to the larger of the two character counts.\"\n    \n    return result\n"}
{"id": "HumanEval/75", "code": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns True if the given number is the multiplication of 3 prime numbers\n    and False otherwise.\n    Knowing that (a) is less than 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Preconditions\n    assert isinstance(a, int), \"Input must be an integer.\"\n    assert a >= 0, \"Input must be a non-negative integer.\"\n    assert a < 100, \"Input must be less than 100.\"\n\n    if a <= 1:\n        return False\n    \n    # Sieve of Eratosthenes to find all primes up to a\n    isprime = [True] * (a + 1)\n    isprime[0], isprime[1] = False, False  # 0 and 1 are not primes\n    for i in range(2, int(a ** 0.5) + 1):\n        if isprime[i]:\n            for j in range(i * i, a + 1, i):\n                isprime[j] = False\n\n    # Count the number of prime factors\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n\n    # Postconditions\n    assert isinstance(cnt, int), \"Count must be an integer.\"\n    assert cnt >= 0, \"Count must be a non-negative integer.\"\n    \n    # Check the logic of the result\n    result = cnt == 3\n    if result:\n        # If the result is True, cnt must be exactly 3.\n        assert cnt == 3, \"If result is True, cnt should be exactly 3.\"\n    else:\n        # If the result is False, cnt should not be 3.\n        assert cnt != 3, \"If result is False, cnt should not be 3.\"\n    \n    return result\n\n"}
{"id": "HumanEval/76", "code": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\n"}
{"id": "HumanEval/77", "code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # Precondition 1: The input 'a' should be an integer.\n    assert isinstance(a, int), \"Input 'a' must be an integer.\"\n\n    a_abs = abs(a)\n    result = int(round(a_abs ** (1. / 3))) ** 3 == a_abs\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: If the result is True, 'a' should be a perfect cube.\n    if result:\n        assert int(round(a_abs ** (1. / 3))) ** 3 == a_abs, \"'a' should be a perfect cube if the result is True.\"\n\n    return result\n\n"}
{"id": "HumanEval/78", "code": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    # Precondition 1: The input 'num' should not be None.\n    assert num is not None, \"Input 'num' must not be None.\"\n\n    # Precondition 2: The input 'num' should be a string.\n    assert isinstance(num, str), \"Input 'num' must be a string.\"\n\n    # Precondition 3: The string should only contain valid hexadecimal digits.\n    assert all(ch in \"0123456789ABCDEF\" for ch in num), \"Input 'num' must contain only valid hexadecimal digits.\"\n\n    prime_digits = \"2357BD\"\n    result = len([ch for ch in num if ch in prime_digits])\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 3: The result should correctly count the prime hexadecimal digits.\n    expected_count = sum(1 for ch in num if ch in prime_digits)\n    assert result == expected_count, \"The result must correctly count the prime hexadecimal digits.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/79", "code": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Precondition 1: The input 'decimal' should be an integer.\n    assert isinstance(decimal, int), \"Input 'decimal' must be an integer.\"\n\n    # Precondition 2: The input 'decimal' should be a non-negative integer.\n    assert decimal >= 0, \"Input 'decimal' must be a non-negative integer.\"\n\n    result = \"db\" + bin(decimal)[2:] + \"db\"\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should start and end with 'db'.\n    assert result.startswith(\"db\") and result.endswith(\"db\"), \"The result must start and end with 'db'.\"\n\n    # Postcondition 3: The content between 'db' and 'db' should be a valid binary representation.\n    binary_content = result[2:-2]\n    assert all(ch in \"01\" for ch in binary_content), \"The content between 'db' and 'db' must be a valid binary representation.\"\n\n    return result\n"}
{"id": "HumanEval/80", "code": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Postcondition 2: The function should return False if the length of 's' is less than 3.\n    if len(s) < 3:\n        return False\n\n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    result = True\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 3: Ensure that every three consecutive characters in the string are distinct.\n    for i in range(len(s) - 2):\n        assert s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2], \\\n            \"Every three consecutive characters in the string must be distinct.\"\n\n    return result\n"}
{"id": "HumanEval/81", "code": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # Precondition 1: The input 'grades' should not be None.\n    assert grades is not None, \"Input 'grades' must not be None.\"\n\n    # Precondition 2: The input 'grades' should be a list.\n    assert isinstance(grades, list), \"Input 'grades' must be a list.\"\n\n    # Precondition 3: All elements in 'grades' should be floats or integers.\n    assert all(isinstance(gpa, (float, int)) for gpa in grades), \"All elements in 'grades' must be floats or integers.\"\n\n    # Precondition 4: All GPA values should be in the range [0.0, 4.0].\n    assert all(0.0 <= gpa <= 4.0 for gpa in grades), \"All GPA values must be within the range [0.0, 4.0].\"\n\n    def to_letter_grade(score):\n        if score == 4.0:\n            return \"A+\"\n        elif score > 3.7:\n            return \"A\"\n        elif score > 3.3:\n            return \"A-\"\n        elif score > 3.0:\n            return \"B+\"\n        elif score > 2.7:\n            return \"B\"\n        elif score > 2.3:\n            return \"B-\"\n        elif score > 2.0:\n            return \"C+\"\n        elif score > 1.7:\n            return \"C\"\n        elif score > 1.3:\n            return \"C-\"\n        elif score > 1.0:\n            return \"D+\"\n        elif score > 0.7:\n            return \"D\"\n        elif score > 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n    \n    result = [to_letter_grade(x) for x in grades]\n\n    # Postcondition 1: The result should be a list of strings.\n    assert isinstance(result, list), \"The result must be a list.\"\n    assert all(isinstance(grade, str) for grade in result), \"All elements in the result must be strings.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(grades), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: Ensure each string in the result list is a valid letter grade.\n    valid_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    assert all(grade in valid_grades for grade in result), \"All elements in the result must be valid letter grades.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/82", "code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    # Precondition 1: The input 'string' should not be None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: The input 'string' should be a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    result = is_prime(len(string))\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: If the result is True, the length of the string should be a prime number.\n    if result:\n        assert len(string) > 1 and all(len(string) % x != 0 for x in range(2, int(len(string) ** 0.5) + 1)), \\\n            \"If the result is True, the length of the string should be a prime number.\"\n\n    return result\n"}
{"id": "HumanEval/83", "code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a positive integer.\n    assert n > 0, \"Input 'n' must be a positive integer.\"\n\n    if n == 1:\n        result = 1\n    else:\n        result = 18 * 10 ** (n - 2)\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 3: Ensure that when 'n' is 1, the result is 1.\n    if n == 1:\n        assert result == 1, \"For n=1, the result should be 1.\"\n\n    return result\n"}
{"id": "HumanEval/84", "code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1, so the output should be \"1\".\n        For N = 150, the sum of digits will be 6, so the output should be \"110\".\n        For N = 147, the sum of digits will be 12, so the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Precondition 1: The input 'N' should not be None.\n    assert N is not None, \"Input 'N' must not be None.\"\n\n    # Precondition 2: The input 'N' should be an integer.\n    assert isinstance(N, int), \"Input 'N' must be an integer.\"\n\n    # Precondition 3: The input 'N' should be within the range 0 \u2264 N \u2264 10000.\n    assert 0 <= N <= 10000, \"Input 'N' must be within the range 0 \u2264 N \u2264 10000.\"\n\n    # Calculate the sum of the digits of N\n    s = sum(int(digit) for digit in str(N))\n\n    # Convert the sum to binary and remove the '0b' prefix\n    result = bin(s)[2:]\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The result should be a valid binary string.\n    assert all(ch in '01' for ch in result), \"The result must be a valid binary string.\"\n\n    return result\n\n"}
{"id": "HumanEval/85", "code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    # Precondition 1: The input 'lst' should not be None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: The input 'lst' should be non-empty.\n    assert len(lst) > 0, \"Input 'lst' must be non-empty.\"\n\n    # Precondition 4: All elements in 'lst' should be integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    # Initialize sum\n    s = 0\n\n    # Iterate over the list and add even elements at odd indices\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(s, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert s >= 0, \"The result must be non-negative.\"\n\n    return s\n\n"}
{"id": "HumanEval/86", "code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters are arranged in\n    ascending order based on ASCII value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Split the string into words, sort each word, and then join them back together\n    words = s.split(\" \")\n    result = \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The length of the result string should match the length of the input string.\n    assert len(result) == len(s), \"The length of the result string must match the length of the input string.\"\n\n    # Postcondition 3: The order of words in the result should be the same as in the input.\n    assert result.split(\" \") == [\"\".join(sorted(word)) for word in s.split(\" \")], \\\n        \"The order of words in the result should match the input order, with characters in each word sorted.\"\n\n    return result\n"}
{"id": "HumanEval/87", "code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2-dimensional data, as a nested list,\n    which is similar to a matrix. However, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst and integer x, find integers x in the list,\n    and return a list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    # Precondition 1: The input 'lst' should not be None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list of lists.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n    assert all(isinstance(row, list) for row in lst), \"Each element in 'lst' must be a list.\"\n\n    # Precondition 3: The input 'x' should be an integer.\n    assert isinstance(x, int), \"Input 'x' must be an integer.\"\n\n    # Collecting the coordinates\n    res = []\n    for i, row in enumerate(lst):\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                res.append((i, j))\n\n    # Postcondition 1: The result should be a list of tuples.\n    assert isinstance(res, list) and all(isinstance(coord, tuple) for coord in res), \"The result must be a list of tuples.\"\n\n    # Postcondition 2: The tuples should be sorted by rows in ascending order.\n    assert res == sorted(res, key=lambda coord: coord[0]), \"The tuples should be sorted by rows in ascending order.\"\n\n    # Postcondition 3: Within each row, the tuples should be sorted by columns in descending order.\n    for i in range(len(res) - 1):\n        if res[i][0] == res[i + 1][0]:\n            assert res[i][1] > res[i + 1][1], \"Within each row, tuples should be sorted by columns in descending order.\"\n\n    return res\n"}
{"id": "HumanEval/88", "code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting.\n    Sort the given array in ascending order if the sum of the first index value and last index value is odd,\n    or sort it in descending order if the sum of the first index value and last index value is even.\n\n    Note:\n    * Don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Precondition 1: The input 'array' should not be None.\n    assert array is not None, \"Input 'array' must not be None.\"\n\n    # Precondition 2: The input 'array' should be a list.\n    assert isinstance(array, list), \"Input 'array' must be a list.\"\n\n    # Precondition 3: All elements in 'array' should be non-negative integers.\n    assert all(isinstance(x, int) and x >= 0 for x in array), \"All elements in 'array' must be non-negative integers.\"\n\n    if not array:\n        return []\n\n    # Determine the sorting order\n    ascending_order = (array[0] + array[-1]) % 2 != 0\n    result = sorted(array, reverse=not ascending_order)\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: The length of the result list should match the length of the input list.\n    assert len(result) == len(array), \"The length of the result list must match the length of the input list.\"\n\n    # Postcondition 3: The result should be correctly sorted based on the condition.\n    if ascending_order:\n        assert result == sorted(array), \"The result should be sorted in ascending order.\"\n    else:\n        assert result == sorted(array, reverse=True), \"The result should be sorted in descending order.\"\n\n    return result\n"}
{"id": "HumanEval/89", "code": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    # Precondition 1: The input string 's' should not be None.\n    assert s is not None, \"Input string 's' must not be None.\"\n\n    # Precondition 2: The input 's' should be a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: The input 's' should contain only lowercase alphabetic characters.\n    assert all(ch.islower() and ch.isalpha() for ch in s), \"Input 's' must contain only lowercase alphabetic characters.\"\n\n    # Define the alphabet string\n    d = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Encrypt the string by shifting each character by 4 places\n    result = \"\".join(\n        chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch for ch in s\n    )\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: The length of the result string should match the length of the input string.\n    assert len(result) == len(s), \"The length of the result string must match the length of the input string.\"\n\n    # Postcondition 3: Each character in the result should be correctly shifted by four places.\n    for original_char, encrypted_char in zip(s, result):\n        expected_char = chr((ord(original_char) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        assert encrypted_char == expected_char, f\"The character '{original_char}' should be encrypted to '{expected_char}', but got '{encrypted_char}'.\"\n\n    return result\n"}
{"id": "HumanEval/90", "code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    # Precondition 1: The input 'lst' should not be None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: All elements in 'lst' should be integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    # Handle cases where there are fewer than 2 elements\n    if len(lst) <= 1:\n        return None\n\n    # Sort the list and find the second smallest distinct element\n    sorted_list = sorted(set(lst))\n    if len(sorted_list) < 2:\n        return None\n    \n    result = sorted_list[1]\n\n    # Postcondition 1: The result should be either an integer or None.\n    assert isinstance(result, (int, type(None))), \"The result must be an integer or None.\"\n\n    # Postcondition 2: The result should be the second smallest element if it exists.\n    if result is not None:\n        assert result > sorted_list[0], \"The result should be the second smallest element.\"\n\n    return result\n"}
{"id": "HumanEval/91", "code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Precondition 1: The input string 'S' should not be None.\n    assert S is not None, \"Input string 'S' must not be None.\"\n\n    # Precondition 2: The input 'S' should be a string.\n    assert isinstance(S, str), \"Input 'S' must be a string.\"\n\n    # Normalize sentence delimiters and split into sentences\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n\n    # Count sentences starting with \"I\"\n    result = len([s for s in sentences if s.startswith(\"I\")])\n\n    # Postcondition 1: The result should be an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: The result should be non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    return result\n\n"}
{"id": "HumanEval/92", "code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Precondition 1: Ensure all inputs are integers.\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if one of the numbers equals the sum of the other two.\n    result = (x == y + z or y == x + z or z == x + y)\n\n    # Postcondition 1: Ensure the result is a boolean.\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return result\n\n"}
{"id": "HumanEval/93", "code": "def encode(message):\n    \"\"\"\n    Write a function that takes a message and encodes it in such a \n    way that it swaps the case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the English alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Precondition 1: The input 'message' should not be None.\n    assert message is not None, \"Input 'message' must not be None.\"\n\n    # Precondition 2: The input 'message' should be a string.\n    assert isinstance(message, str), \"Input 'message' must be a string.\"\n\n    # Define a function to handle vowel changes\n    def vowel_change(ch):\n        if ch in \"aeiou\":\n            return chr(ord(ch) + 2)\n        elif ch in \"AEIOU\":\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    # Swap the case of the message\n    m = message.swapcase()\n\n    # Apply vowel changes\n    result = \"\".join(map(vowel_change, m))\n\n    # Postcondition 1: The result should be a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    return result\n"}
{"id": "HumanEval/94", "code": "def largest_prime_digit_sum(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    # Precondition 1: The input list 'lst' should not be None.\n    assert lst is not None, \"Input list 'lst' must not be None.\"\n\n    # Precondition 2: The input 'lst' should be a list of integers.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    def is_prime(a):\n        if a < 2:\n            return False\n        for x in range(2, int(a ** 0.5) + 1):\n            if a % x == 0:\n                return False\n        return True\n\n    # Sort the list in descending order\n    sorted_list = sorted(lst, reverse=True)\n\n    # Find the largest prime and return the sum of its digits\n    for x in sorted_list:\n        if is_prime(x):\n            result = sum(int(ch) for ch in str(x))\n            \n            # Postcondition 1: The result should be an integer.\n            assert isinstance(result, int), \"The result must be an integer.\"\n            \n            # Postcondition 2: The result should be non-negative.\n            assert result >= 0, \"The result must be a non-negative integer.\"\n            \n            return result\n\n    # If no prime number is found, return None\n    return None\n"}
{"id": "HumanEval/95", "code": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # Precondition 1: The input 'dict' should not be None.\n    assert d is not None, \"Input 'dict' must not be None.\"\n\n    # Precondition 2: The input 'dict' should be a dictionary.\n    assert isinstance(d, dict), \"Input 'dict' must be a dictionary.\"\n\n    # If the dictionary is empty, return False.\n    if not d:\n        return False\n\n    # Flags to check if all keys are lower or upper case.\n    all_lower = all_upper = True\n\n    for key in d.keys():\n        if not isinstance(key, str):\n            return False  # Non-string keys make the dictionary invalid for this check.\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    result = all_lower or all_upper\n\n    # Postcondition 1: The result should be a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    # Postcondition 2: If the dictionary is empty, the result should be False.\n    if not d:\n        assert result is False, \"The result must be False if the dictionary is empty.\"\n\n    # Postcondition 3: If the result is True, all keys should either be lower or upper case.\n    if result:\n        assert all_lower or all_upper, \"If the result is True, all keys must be consistently lowercase or uppercase.\"\n\n    # Postcondition 4: If there are mixed-case keys, the result should be False.\n    if any(key.islower() for key in d.keys()) and any(key.isupper() for key in d.keys()):\n        assert result is False, \"The result must be False if there are mixed-case keys.\"\n\n    # Postcondition 5: If the dictionary contains non-string keys, the result should be False.\n    if any(not isinstance(key, str) for key in d.keys()):\n        assert result is False, \"The result must be False if the dictionary contains non-string keys.\"\n\n    # Postcondition 6: If all keys are lowercase, the result should be True.\n    if all_lower:\n        assert result is True, \"The result must be True if all keys are lowercase.\"\n\n    # Postcondition 7: If all keys are uppercase, the result should be True.\n    if all_upper:\n        assert result is True, \"The result must be True if all keys are uppercase.\"\n\n    return result\n"}
{"id": "HumanEval/96", "code": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2, 3]\n    count_up_to(11) => [2, 3, 5, 7]\n    count_up_to(0) => []\n    count_up_to(20) => [2, 3, 5, 7, 11, 13, 17, 19]\n    count_up_to(1) => []\n    count_up_to(18) => [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n\n    # Precondition 1: The input 'n' should not be None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: The input 'n' should be an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: The input 'n' should be a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n\n    # Postcondition 1: The result should be a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: All elements in the result should be prime numbers.\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    assert all(is_prime(num) for num in ans), \"All elements in the result must be prime numbers.\"\n\n    # Postcondition 3: All elements in the result should be less than 'n'.\n    assert all(num < n for num in ans), \"All elements in the result must be less than 'n'.\"\n\n    return ans\n\n"}
{"id": "HumanEval/97", "code": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    # Precondition 1: Ensure both 'a' and 'b' are integers.\n    assert isinstance(a, int), \"Input 'a' must be an integer.\"\n    assert isinstance(b, int), \"Input 'b' must be an integer.\"\n\n    # Compute the product of the unit digits.\n    result = int(str(a)[-1]) * int(str(b)[-1])\n\n    # Postcondition 1: Ensure the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure the result is correct.\n    assert result == (abs(a) % 10) * (abs(b) % 10), \"The result must be the product of the unit digits of 'a' and 'b'.\"\n\n    return result\n\n"}
{"id": "HumanEval/98", "code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    # Precondition 1: Ensure that 's' is not None.\n    assert s is not None, \"Input 's' must not be None.\"\n\n    # Precondition 2: Ensure that 's' is a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: Ensure that 's' is not an empty string (optional, based on requirements).\n    assert len(s) >= 0, \"Input 's' can be empty but must be a string.\"\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(cnt, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative.\n    assert cnt >= 0, \"The result must be non-negative.\"\n\n    # Postcondition 3: Ensure that the result correctly counts uppercase vowels at even indices.\n    assert cnt == sum(1 for i in range(0, len(s), 2) if s[i] in \"AEIOU\"), \"The result does not correctly count uppercase vowels at even indices.\"\n\n    # Postcondition 4: Ensure that if the input string is empty, the result is 0.\n    if len(s) == 0:\n        assert cnt == 0, \"If the input string is empty, the result should be 0.\"\n\n    # Postcondition 5: Ensure that if there are no uppercase vowels at even indices, the result is 0.\n    if not any(s[i] in \"AEIOU\" for i in range(0, len(s), 2)):\n        assert cnt == 0, \"If there are no uppercase vowels at even indices, the result should be 0.\"\n\n    return cnt\n"}
{"id": "HumanEval/99", "code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Precondition 1: Ensure that 'value' is not None.\n    assert value is not None, \"Input 'value' must not be None.\"\n\n    # Precondition 2: Ensure that 'value' is a string.\n    assert isinstance(value, str), \"Input 'value' must be a string.\"\n\n    # Precondition 3: Ensure that 'value' represents a valid number.\n    try:\n        float(value)\n    except ValueError:\n        assert False, \"Input 'value' must be a valid number string.\"\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n\n    result = rounding(float(value))\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is the closest integer, rounding away from zero if equidistant.\n    val = float(value)\n    if abs(val - int(val)) == 0.5:\n        if val > 0:\n            assert result == int(val) + 1, \"The result should be rounded away from zero.\"\n        else:\n            assert result == int(val) - 1, \"The result should be rounded away from zero.\"\n    else:\n        assert result == round(val), \"The result should be the closest integer.\"\n\n    return result\n"}
{"id": "HumanEval/100", "code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is not None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: Ensure that 'n' is an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: Ensure that 'n' is a positive integer.\n    assert n > 0, \"Input 'n' must be a positive integer.\"\n\n    ans, num = [], n\n    for _ in range(n):\n        ans.append(num)\n        num += 2\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the list has exactly 'n' elements.\n    assert len(ans) == n, f\"The result list must have {n} elements.\"\n\n    # Postcondition 3: Ensure that the first element is equal to 'n'.\n    assert ans[0] == n, f\"The first element must be {n}.\"\n\n    # Postcondition 4: Ensure that each subsequent element increases by 2.\n    assert all(ans[i] == ans[i-1] + 2 for i in range(1, n)), \"Each element must increase by 2 from the previous one.\"\n\n    return ans\n\n\n"}
{"id": "HumanEval/101", "code": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # Precondition 1: Ensure that 's' is not None.\n    assert s is not None, \"Input 's' must not be None.\"\n\n    # Precondition 2: Ensure that 's' is a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: Ensure that 's' is not an empty string.\n    assert len(s) > 0, \"Input 's' must not be an empty string.\"\n\n    # Replace commas with spaces and split the string into words\n    words = s.replace(\",\", \" \").split()\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(words, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that there are no empty strings in the result list.\n    assert all(word != \"\" for word in words), \"The result list must not contain empty strings.\"\n\n    # Postcondition 3: Ensure that the words in the result match the expected words.\n    expected_words = [word for word in s.replace(\",\", \" \").split() if word != \"\"]\n    assert words == expected_words, \"The result list does not match the expected words.\"\n\n    # Postcondition 4: Ensure that the words are in the same order as they appeared in the input string.\n    assert words == expected_words, \"The words in the result list must maintain the original order.\"\n\n    return words\n"}
{"id": "HumanEval/102", "code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Precondition 1: Ensure that 'x' and 'y' are not None.\n    assert x is not None and y is not None, \"Inputs 'x' and 'y' must not be None.\"\n\n    # Precondition 2: Ensure that 'x' and 'y' are integers.\n    assert isinstance(x, int) and isinstance(y, int), \"Inputs 'x' and 'y' must be integers.\"\n\n    # Precondition 3: Ensure that 'x' and 'y' are positive integers.\n    assert x > 0 and y > 0, \"Inputs 'x' and 'y' must be positive integers.\"\n\n    if x > y:\n        result = -1\n    elif x == y:\n        result = y if y % 2 == 0 else -1\n    else:\n        result = y if y % 2 == 0 else y - 1\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that if the result is not -1, it is within the range [x, y].\n    if result != -1:\n        assert x <= result <= y, \"The result must be within the range [x, y].\"\n\n    # Postcondition 3: Ensure that if the result is not -1, it is an even number.\n    if result != -1:\n        assert result % 2 == 0, \"The result must be an even number.\"\n\n    # Postcondition 4: Ensure that if no even number is within the range [x, y], the result is -1.\n    if result == -1:\n        assert all(num % 2 != 0 for num in range(x, y + 1)), \"The result should be -1 if no even number is in the range.\"\n\n    # Postcondition 5: Ensure that the result is the largest even number in the range [x, y].\n    if result != -1:\n        assert result == max(num for num in range(x, y + 1) if num % 2 == 0), \"The result must be the largest even number in the range.\"\n\n    return result\n"}
{"id": "HumanEval/103", "code": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' and 'm' are not None.\n    assert n is not None and m is not None, \"Inputs 'n' and 'm' must not be None.\"\n\n    # Precondition 2: Ensure that 'n' and 'm' are integers.\n    assert isinstance(n, int) and isinstance(m, int), \"Inputs 'n' and 'm' must be integers.\"\n\n    # Precondition 3: Ensure that 'n' and 'm' are positive integers.\n    assert n > 0 and m > 0, \"Inputs 'n' and 'm' must be positive integers.\"\n\n    if n > m:\n        result = -1\n    else:\n        avg = round((n + m) / 2)\n        result = bin(avg)\n\n    # Postcondition 1: Ensure that the result is either an integer or a string.\n    assert isinstance(result, (int, str)), \"The result must be either an integer or a string.\"\n\n    # Postcondition 2: Ensure that the binary result starts with '0b'.\n    if isinstance(result, str):\n        assert result.startswith(\"0b\"), \"The binary result must start with '0b'.\"\n\n    # Postcondition 3: Ensure that the result correctly represents the rounded average in binary form.\n    if isinstance(result, str):\n        assert int(result, 2) == avg, \"The result must correctly represent the rounded average in binary form.\"\n\n    # Postcondition 4: Ensure that if 'n' is greater than 'm', the result is -1.\n    if n > m:\n        assert result == -1, \"The result must be -1 if 'n' is greater than 'm'.\"\n\n    # Postcondition 5: Ensure that the result, when converted back to decimal, lies within the range [n, m].\n    if isinstance(result, str):\n        assert n <= int(result, 2) <= m, \"The result in decimal must lie within the range [n, m].\"\n\n    return result\n"}
{"id": "HumanEval/104", "code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Precondition 1: Ensure that 'x' is not None.\n    assert x is not None, \"Input 'x' must not be None.\"\n\n    # Precondition 2: Ensure that 'x' is a list.\n    assert isinstance(x, list), \"Input 'x' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'x' are positive integers.\n    assert all(isinstance(i, int) and i > 0 for i in x), \"All elements in 'x' must be positive integers.\"\n\n    def judge(num):\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n\n    result = sorted(list(filter(judge, x)))\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that all elements in the result list contain only odd digits.\n    assert all(all(int(ch) % 2 != 0 for ch in str(num)) for num in result), \"All elements in the result list must contain only odd digits.\"\n\n    # Postcondition 3: Ensure that the result list is sorted in increasing order.\n    assert result == sorted(result), \"The result list must be sorted in increasing order.\"\n\n    # Postcondition 4: Ensure that if no elements meet the criteria, the result is an empty list.\n    if not any(judge(num) for num in x):\n        assert result == []\n"}
{"id": "HumanEval/105", "code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return \"One\"\n        elif x == 2:\n            return \"Two\"\n        elif x == 3:\n            return \"Three\"\n        elif x == 4:\n            return \"Four\"\n        elif x == 5:\n            return \"Five\"\n        elif x == 6:\n            return \"Six\"\n        elif x == 7:\n            return \"Seven\"\n        elif x == 8:\n            return \"Eight\"\n        else:\n            return \"Nine\"\n\n    # Process the list: sort, reverse, and convert\n    sorted_list = sorted(arr)[::-1]\n    ans = []\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that all elements in the result list are valid words.\n    valid_words = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    assert all(word in valid_words for word in ans), \"All elements in the result list must be valid words.\"\n\n    # Postcondition 3: Ensure that the result list is sorted in the correct reverse order.\n    assert ans == [to_word(x) for x in sorted([i for i in arr if 1 <= i <= 9])[::-1]], \\\n        \"The result list must be correctly sorted and reversed.\"\n\n    # Postcondition 4: Ensure that if the input array is empty, the result is also empty.\n    if not arr:\n        assert ans == [], \"The result should be an empty list if the input is an empty array.\"\n\n    # Postcondition 5: Ensure that elements outside the range 1-9 are ignored.\n    assert all(1 <= x <= 9 for x in arr if to_word(x) in ans), \"The result list must only contain elements from 1 to 9.\"\n\n    return ans\n\n"}
{"id": "HumanEval/106", "code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is not None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: Ensure that 'n' is an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: Ensure that 'n' is a non-negative integer.\n    assert n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the length of the result list is equal to 'n'.\n    assert len(ans) == n, f\"The length of the result list must be {n}.\"\n\n    # Postcondition 3: Ensure that for even indices, the value is the factorial of that index.\n    for i in range(2, n, 2):  # Even indices in 0-based list correspond to 2, 4, 6, etc. in 1-based\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        assert ans[i - 1] == factorial, f\"Element at index {i} must be the factorial of {i}.\"\n\n    # Postcondition 4: Ensure that for odd indices, the value is the sum of numbers from 1 to that index.\n    for i in range(1, n, 2):  # Odd indices in 0-based list correspond to 1, 3, 5, etc. in 1-based\n        expected_sum = sum(range(1, i + 1))\n        assert ans[i - 1] == expected_sum, f\"Element at index {i} must be the sum of numbers from 1 to {i}.\"\n\n    # Postcondition 5: Ensure that the function correctly handles edge cases like 'n = 0'.\n    if n == 0:\n        assert ans == [], \"The result should be an empty list if 'n' is 0.\"\n\n    return ans\n"}
{"id": "HumanEval/107", "code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is not None.\n    assert n is not None, \"Input 'n' must not be None.\"\n\n    # Precondition 2: Ensure that 'n' is an integer.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n\n    # Precondition 3: Ensure that 'n' is a positive integer.\n    assert n > 0, \"Input 'n' must be a positive integer.\"\n\n    # Precondition 4: Ensure that 'n' is within the valid range (1 <= n <= 10^3).\n    assert 1 <= n <= 10**3, \"Input 'n' must be within the range 1 <= n <= 10^3.\"\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n\n    result = (even_cnt, odd_cnt)\n\n    # Postcondition 1: Ensure that the result is a tuple.\n    assert isinstance(result, tuple), \"The result must be a tuple.\"\n\n    # Postcondition 2: Ensure that the tuple has exactly two elements.\n    assert len(result) == 2, \"The result tuple must have exactly two elements.\"\n\n    # Postcondition 3: Ensure that both elements in the tuple are non-negative integers.\n    assert isinstance(result[0], int) and isinstance(result[1], int), \"Both elements in the result tuple must be integers.\"\n    assert result[0] >= 0 and result[1] >= 0, \"Both elements in the result tuple must be non-negative.\"\n\n    # Postcondition 4: Ensure that the counts correctly represent the number of even and odd palindromes.\n    computed_odd_cnt, computed_even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                computed_odd_cnt += 1\n            else:\n                computed_even_cnt += 1\n    assert result == (computed_even_cnt, computed_odd_cnt), \"The result does not correctly represent the number of even and odd palindromes.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/108", "code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n\n    result = sum(map(judge, arr))\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative.\n    assert result >= 0, \"The result must be a non-negative integer.\"\n\n    # Postcondition 3: Ensure that the result correctly counts elements with a sum of digits > 0.\n    computed_result = 0\n    for num in arr:\n        l = list(str(num))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        if sum(l) > 0:\n            computed_result += 1\n    assert result == computed_result, \"The result does not correctly count elements with a sum of digits > 0.\"\n\n    return result\n"}
{"id": "HumanEval/109", "code": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    # Precondition 4: Ensure that all elements in 'arr' are unique.\n    assert len(arr) == len(set(arr)), \"All elements in 'arr' must be unique.\"\n\n    # Postcondition 1: If the array is empty, return True.\n    if not arr:\n        assert True, \"The result must be True if the input array is empty.\"\n        return True\n\n    sorted_arr = sorted(arr)\n\n    # Postcondition 2: Ensure that the array is not already sorted.\n    if arr == sorted_arr:\n        assert arr == sorted_arr, \"If the array is already sorted, the result must be True.\"\n        return True\n\n    # Check if the array can be sorted by any number of right shifts\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            # Postcondition 3: Ensure that a valid right shift results in a sorted array.\n            assert arr[i:] + arr[:i] == sorted_arr, \"A valid right shift should result in a sorted array.\"\n            return True\n\n    # Postcondition 4: Ensure that no possible right shift results in a sorted array.\n    assert all(arr[i:] + arr[:i] != sorted_arr for i in range(1, len(arr))), \"No possible right shift should result in a sorted array if the result is False.\"\n    return False\n\n\n"}
{"id": "HumanEval/110", "code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Precondition 1: Ensure that 'lst1' and 'lst2' are not None.\n    assert lst1 is not None and lst2 is not None, \"Input lists 'lst1' and 'lst2' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst1' and 'lst2' are lists.\n    assert isinstance(lst1, list) and isinstance(lst2, list), \"Inputs 'lst1' and 'lst2' must be lists.\"\n\n    # Precondition 3: Ensure that 'lst1' and 'lst2' are non-empty lists.\n    assert len(lst1) > 0 and len(lst2) > 0, \"Input lists 'lst1' and 'lst2' must be non-empty.\"\n\n    # Precondition 4: Ensure that all elements in 'lst1' and 'lst2' are integers.\n    assert all(isinstance(x, int) for x in lst1), \"All elements in 'lst1' must be integers.\"\n    assert all(isinstance(x, int) for x in lst2), \"All elements in 'lst2' must be integers.\"\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n\n    result = \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is either 'YES' or 'NO'.\n    assert result in [\"YES\", \"NO\"], \"The result must be either 'YES' or 'NO'.\"\n\n    return result\n"}
{"id": "HumanEval/111", "code": "def histogram(test):\n    \"\"\"Given a string representing space-separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n\n    # Precondition 1: Ensure that 'test' is not None.\n    assert test is not None, \"Input 'test' must not be None.\"\n\n    # Precondition 2: Ensure that 'test' is a string.\n    assert isinstance(test, str), \"Input 'test' must be a string.\"\n\n    # Precondition 3: Ensure that 'test' contains only lowercase letters and spaces.\n    assert all(ch.islower() or ch.isspace() for ch in test), \"Input 'test' must contain only lowercase letters and spaces.\"\n\n    if test == \"\":\n        return {}\n\n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n\n    # Postcondition 1: Ensure that the count dictionary is not empty if the input is not empty.\n    assert len(count) > 0, \"The count dictionary should not be empty if the input is not empty.\"\n\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n\n    # Postcondition 2: Ensure that the result is a dictionary.\n    assert isinstance(ans, dict), \"The result must be a dictionary.\"\n\n    # Postcondition 3: Ensure that the result contains the most frequent letters.\n    assert all(v == mx for v in ans.values()), \"All values in the result must equal the maximum frequency.\"\n\n    return ans\n\n\n"}
{"id": "HumanEval/112", "code": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is a palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n\n    # Precondition 1: Ensure that 's' and 'c' are not None.\n    assert s is not None and c is not None, \"Inputs 's' and 'c' must not be None.\"\n\n    # Precondition 2: Ensure that 's' and 'c' are strings.\n    assert isinstance(s, str) and isinstance(c, str), \"Inputs 's' and 'c' must be strings.\"\n\n    # Precondition 3: Ensure that 's' and 'c' contain only alphabetic characters.\n    assert s.isalpha() and c.isalpha(), \"Inputs 's' and 'c' must contain only alphabetic characters.\"\n\n    # Perform the reverse delete operation\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n\n    # Postcondition 1: Ensure that the result is a tuple.\n    result = (ss, ss == ss[::-1])\n    assert isinstance(result, tuple), \"The result must be a tuple.\"\n\n    # Postcondition 2: Ensure that the first element of the result is a string.\n    assert isinstance(result[0], str), \"The first element of the result tuple must be a string.\"\n\n    # Postcondition 3: Ensure that the second element of the result is a boolean.\n    assert isinstance(result[1], bool), \"The second element of the result tuple must be a boolean.\"\n\n    # Postcondition 4: Ensure that the palindrome check is correct.\n    assert result[1] == (ss == ss[::-1]), \"The palindrome check must be correct.\"\n\n    return result\n"}
{"id": "HumanEval/113", "code": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'lst' are strings.\n    assert all(isinstance(s, str) for s in lst), \"All elements in 'lst' must be strings.\"\n\n    # Precondition 4: Ensure that all strings in 'lst' contain only digits.\n    assert all(s.isdigit() for s in lst), \"All strings in 'lst' must contain only digits.\"\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the list has the same length as the input list.\n    assert len(ans) == len(lst), \"The result list must have the same length as the input list.\"\n\n    # Postcondition 3: Ensure that the odd count in the output string matches the actual count.\n    for i, s in enumerate(lst):\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        expected_output = f\"the number of odd elements {odd_cnt}n the str{odd_cnt}ng {odd_cnt} of the {odd_cnt}nput.\"\n        assert ans[i] == expected_output, f\"The output string for input {s} does not match the expected format.\"\n\n    return ans\n\n\n\n"}
{"id": "HumanEval/114", "code": "import math\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Precondition 1: Ensure that 'nums' is not None.\n    assert nums is not None, \"Input 'nums' must not be None.\"\n\n    # Precondition 2: Ensure that 'nums' is a list.\n    assert isinstance(nums, list), \"Input 'nums' must be a list.\"\n\n    # Precondition 3: Ensure that 'nums' is non-empty.\n    assert len(nums) > 0, \"Input 'nums' must be a non-empty list.\"\n\n    # Precondition 4: Ensure that all elements in 'nums' are integers.\n    assert all(isinstance(x, int) for x in nums), \"All elements in 'nums' must be integers.\"\n\n    # If all elements are non-negative, return the smallest element.\n    if all(x >= 0 for x in nums):\n        result = min(nums)\n\n        # Postcondition 1: Ensure that the result is an integer.\n        assert isinstance(result, int), \"The result must be an integer.\"\n\n        # Postcondition 2: Ensure that the result is one of the elements in 'nums'.\n        assert result in nums, \"The result must be one of the elements in 'nums'.\"\n\n        return result\n\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0:\n            s = 0\n\n    # Postcondition 3: Ensure that the result is an integer.\n    assert isinstance(ans, int), \"The result must be an integer.\"\n\n    # Postcondition 4: Ensure that the result is less than or equal to the sum of 'nums'.\n    assert ans <= sum(nums), \"The result must be less than or equal to the sum of the entire array.\"\n\n    return ans\n\n"}
{"id": "HumanEval/115", "code": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Precondition 1: Ensure that 'grid' is not None.\n    assert grid is not None, \"Input 'grid' must not be None.\"\n\n    # Precondition 2: Ensure that 'grid' is a list of lists.\n    assert isinstance(grid, list) and all(isinstance(row, list) for row in grid), \"Input 'grid' must be a list of lists.\"\n\n    # Precondition 3: Ensure that all elements in 'grid' are 0 or 1.\n    assert all(all(cell in [0, 1] for cell in row) for row in grid), \"All elements in 'grid' must be either 0 or 1.\"\n\n    # Precondition 4: Ensure that 'capacity' is an integer between 1 and 10.\n    assert isinstance(capacity, int) and 1 <= capacity <= 10, \"Input 'capacity' must be an integer between 1 and 10.\"\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n\n    # Postcondition 1: Ensure that the result is a non-negative integer.\n    assert isinstance(ans, int) and ans >= 0, \"The result must be a non-negative integer.\"\n\n    return ans\n"}
{"id": "HumanEval/116", "code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    from functools import cmp_to_key\n    \n    def cmp(x: int, y: int) -> int:\n        x1 = bin(x).count(\"1\")\n        y1 = bin(y).count(\"1\")\n        if x1 != y1:\n            return x1 - y1\n        return x - y\n\n    result = sorted(arr, key=cmp_to_key(cmp))\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result has the same length as the input list.\n    assert len(result) == len(arr), \"The result list must have the same length as the input list.\"\n\n    # Postcondition 3: Ensure that the result is sorted according to the specified criteria.\n    for i in range(len(result) - 1):\n        if bin(result[i]).count(\"1\") > bin(result[i + 1]).count(\"1\"):\n            assert False, \"The list is not sorted according to the number of ones in binary representation.\"\n        if bin(result[i]).count(\"1\") == bin(result[i + 1]).count(\"1\"):\n            assert result[i] <= result[i + 1], \"The list is not sorted correctly for elements with the same number of ones.\"\n\n    return result\n"}
{"id": "HumanEval/117", "code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Precondition 1: Ensure that 's' is not None.\n    assert s is not None, \"Input 's' must not be None.\"\n\n    # Precondition 2: Ensure that 's' is a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    # Precondition 3: Ensure that 'n' is a natural number (positive integer).\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a natural number (positive integer).\"\n\n    # Precondition 4: Ensure that the string 's' contains only letters and spaces.\n    assert all(ch.isalpha() or ch.isspace() for ch in s), \"Input 's' must contain only letters and spaces.\"\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n:\n                ans.append(word)\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that all elements in the result list are strings.\n    assert all(isinstance(word, str) for word in ans), \"All elements in the result list must be strings.\"\n\n    # Postcondition 3: Ensure that all words in the result list have exactly 'n' consonants.\n    assert all(len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) == n for word in ans), \"All words in the result list must have exactly 'n' consonants.\"\n\n    return ans\n\n\n"}
{"id": "HumanEval/118", "code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    # Precondition 1: Ensure that 'word' is not None.\n    assert word is not None, \"Input 'word' must not be None.\"\n\n    # Precondition 2: Ensure that 'word' is a string.\n    assert isinstance(word, str), \"Input 'word' must be a string.\"\n\n    # Precondition 3: Ensure that 'word' contains only English letters.\n    assert word.isalpha(), \"Input 'word' must contain only English letters.\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n\n    # Postcondition 1: Ensure that the result is a string.\n    result = \"\"\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is either an empty string or a vowel.\n    assert result == \"\" or result in \"aeiouAEIOU\", \"The result must be either an empty string or a vowel.\"\n\n    return \"\"\n"}
{"id": "HumanEval/119", "code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list of two elements.\n    assert isinstance(lst, list) and len(lst) == 2, \"Input 'lst' must be a list of two strings.\"\n\n    # Precondition 3: Ensure that both elements in 'lst' are strings.\n    assert all(isinstance(s, str) for s in lst), \"Both elements in 'lst' must be strings.\"\n\n    # Precondition 4: Ensure that both strings contain only '(' and ')'.\n    assert all(all(ch in '()' for ch in s) for s in lst), \"Strings must contain only '(' and ')'.\"\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: \n                return False\n        return cnt == 0\n\n    result = \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is either 'Yes' or 'No'.\n    assert result in [\"Yes\", \"No\"], \"The result must be either 'Yes' or 'No'.\"\n\n    return result\n"}
{"id": "HumanEval/120", "code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    # Precondition 4: Ensure that 'k' is a non-negative integer within the valid range.\n    assert isinstance(k, int) and 0 <= k <= len(arr), \"Input 'k' must be a non-negative integer within the valid range.\"\n\n    result = sorted(sorted(arr)[::-1][:k])\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the length of the result list is equal to 'k'.\n    assert len(result) == k, \"The result list must have a length equal to 'k'.\"\n\n    # Postcondition 3: Ensure that the result list is sorted in ascending order.\n    assert result == sorted(result), \"The result list must be sorted in ascending order.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/121", "code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: Ensure that 'lst' is non-empty.\n    assert len(lst) > 0, \"Input 'lst' must be a non-empty list.\"\n\n    # Precondition 4: Ensure that all elements in 'lst' are integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    result = sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative.\n    assert result >= 0, \"The result must be a non-negative integer.\"\n\n    return result\n\n"}
{"id": "HumanEval/122", "code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    # Precondition 4: Ensure that 'k' is an integer within the valid range.\n    assert isinstance(k, int) and 1 <= k <= len(arr), \"Input 'k' must be an integer within the valid range.\"\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n\n    result = sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative or equal to zero.\n    assert result >= 0, \"The result must be non-negative or equal to zero.\"\n\n    return result\n\n"}
{"id": "HumanEval/123", "code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a positive integer.\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a positive integer.\"\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1:\n            ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    \n    result = sorted(ans)\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that all elements in the result are odd integers.\n    assert all(x % 2 == 1 for x in result), \"All elements in the result list must be odd integers.\"\n\n    # Postcondition 3: Ensure that the result list is sorted in increasing order.\n    assert result == sorted(result), \"The result list must be sorted in increasing order.\"\n\n    # Postcondition 4: Ensure that the result contains 1, as the sequence always ends at 1.\n    assert 1 in result, \"The result list must contain the number 1.\"\n\n    return result\n\n\n\n"}
{"id": "HumanEval/124", "code": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Precondition 1: Ensure that 'date' is not None.\n    assert date is not None, \"Input 'date' must not be None.\"\n\n    # Precondition 2: Ensure that 'date' is a string.\n    assert isinstance(date, str), \"Input 'date' must be a string.\"\n\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Postcondition 1: Ensure that the length of the date string is correct.\n    if len(date) != 10: return False\n\n    # Postcondition 2: Ensure the format is correct.\n    if date[2] != \"-\" or date[5] != \"-\": return False\n\n    m, d, y = date[:2], date[3:5], date[6:]\n\n    # Postcondition 3: Ensure that the month, day, and year are digits.\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n\n    m, d = int(m), int(d)\n\n    # Postcondition 4: Ensure that the month is within the valid range.\n    if not 1 <= m <= 12: return False\n\n    # Postcondition 5: Ensure that the day is within the valid range for the given month.\n    if not 1 <= d <= days[m-1]: return False\n\n    return True\n"}
{"id": "HumanEval/125", "code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text, you\n    should split on commas ','. If no commas exist, you should return the number of lowercase letters with an odd order in the\n    alphabet, where ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    # Precondition 1: Ensure that 'txt' is not None.\n    assert txt is not None, \"Input 'txt' must not be None.\"\n\n    # Precondition 2: Ensure that 'txt' is a string.\n    assert isinstance(txt, str), \"Input 'txt' must be a string.\"\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]):\n        result = txt.split()\n    elif \",\" in txt:\n        result = txt.split(\",\")\n    else:\n        cnt = 0\n        for ch in txt:\n            if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1:\n                cnt += 1\n        result = cnt\n\n    # Postcondition 1: Ensure the result is a list if there are whitespaces or commas.\n    if any([x in txt for x in whitespace]) or \",\" in txt:\n        assert isinstance(result, list), \"The result must be a list when splitting on whitespace or commas.\"\n\n    # Postcondition 2: Ensure the result is an integer if no whitespace or commas exist.\n    if not any([x in txt for x in whitespace]) and \",\" not in txt:\n        assert isinstance(result, int), \"The result must be an integer if no whitespace or commas exist.\"\n\n    return result\n\n"}
{"id": "HumanEval/126", "code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'lst' are non-negative integers.\n    assert all(isinstance(x, int) and x >= 0 for x in lst), \"All elements in 'lst' must be non-negative integers.\"\n\n    count = dict()\n    for x in lst:\n        if x not in count:\n            count[x] = 0\n        count[x] += 1\n        if count[x] > 2:\n            return False\n\n    result = lst == sorted(lst)\n\n    # Postcondition 1: Ensure that the result is a boolean.\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return result\n"}
{"id": "HumanEval/127", "code": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    # Precondition 1: Ensure that both intervals are tuples of two integers.\n    assert isinstance(interval1, tuple) and isinstance(interval2, tuple), \"Both intervals must be tuples.\"\n    assert len(interval1) == 2 and len(interval2) == 2, \"Both intervals must contain exactly two elements.\"\n    assert all(isinstance(x, int) for x in interval1), \"All elements in interval1 must be integers.\"\n    assert all(isinstance(x, int) for x in interval2), \"All elements in interval2 must be integers.\"\n\n    # Precondition 2: Ensure that the start of each interval is less than or equal to its end.\n    assert interval1[0] <= interval1[1], \"Start of interval1 must be less than or equal to its end.\"\n    assert interval2[0] <= interval2[1], \"Start of interval2 must be less than or equal to its end.\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    # Ensure interval1 starts before or at the same time as interval2\n    if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n\n    l, r = interval2[0], min(interval1[1], interval2[1])\n\n    # Postcondition 1: Ensure that the intersection length is a non-negative integer.\n    intersection_length = r - l\n    assert isinstance(intersection_length, int) and intersection_length >= 0, \"Intersection length must be a non-negative integer.\"\n\n    # Postcondition 2: Ensure that the result is either \"YES\" or \"NO\".\n    result = \"YES\" if is_prime(intersection_length) else \"NO\"\n    assert result in [\"YES\", \"NO\"], \"The result must be either 'YES' or 'NO'.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/128", "code": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    if arr == []: \n        return None\n\n    if 0 in arr: \n        return 0\n\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n\n    result = s * sgn\n\n    # Postcondition 1: Ensure that the result is an integer or None.\n    assert isinstance(result, int) or result is None, \"The result must be an integer or None.\"\n\n    # Postcondition 2: Ensure that if the array contains 0, the result is 0.\n    if 0 in arr:\n        assert result == 0, \"The result must be 0 if the array contains 0.\"\n\n    # Postcondition 3: Ensure that if the array is empty, the result is None.\n    if arr == []:\n        assert result is None, \"The result must be None if the array is empty.\"\n\n    return result\n"}
{"id": "HumanEval/129", "code": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path goes through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'grid' is a list of lists with proper dimensions.\n    assert isinstance(grid, list) and all(isinstance(row, list) for row in grid), \"Input 'grid' must be a list of lists.\"\n    assert all(len(row) == len(grid) for row in grid), \"Grid must be NxN in dimensions.\"\n\n    # Precondition 2: Ensure that N >= 2.\n    N = len(grid)\n    assert N >= 2, \"Grid size N must be at least 2.\"\n\n    # Precondition 3: Ensure that k is a positive integer.\n    assert isinstance(k, int) and k > 0, \"Input 'k' must be a positive integer.\"\n\n    # Precondition 4: Ensure that all values in the grid are unique and within the valid range.\n    flattened_grid = [val for row in grid for val in row]\n    assert len(flattened_grid) == len(set(flattened_grid)), \"All values in the grid must be unique.\"\n    assert all(1 <= val <= N * N for val in flattened_grid), \"All values in the grid must be in the range [1, N*N].\"\n\n    # Find the minimum path\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n\n    result = [1 if i % 2 == 0 else mn for i in range(k)]\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result list has length k.\n    assert len(result) == k, \"The result list must have length k.\"\n\n    # Postcondition 3: Ensure that the result list contains valid values from the grid.\n    assert all(val in flattened_grid for val in result), \"The result list must contain valid values from the grid.\"\n\n    return result\n"}
{"id": "HumanEval/130", "code": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a non-negative integer.\n    assert isinstance(n, int) and n >= 0, \"Input 'n' must be a non-negative integer.\"\n\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n\n    ans = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            ans.append(1 + i // 2)  # Using integer division to avoid floating-point numbers\n        else:\n            ans.append(ans[-1] + ans[-2] + 1 + (i + 1) // 2)\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(ans, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the list has length n + 1.\n    assert len(ans) == n + 1, \"The result list must have length n + 1.\"\n\n    # Postcondition 3: Ensure that all elements in the list are integers.\n    assert all(isinstance(x, int) for x in ans), \"All elements in the result list must be integers.\"\n\n    return ans\n"}
{"id": "HumanEval/131", "code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a positive integer.\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a positive integer.\"\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        digit = int(ch)\n        if digit % 2 == 1:\n            has_odd = True\n            prod *= digit\n    \n    # Postcondition 1: Ensure that the result is a non-negative integer.\n    result = 0 if not has_odd else prod\n    assert isinstance(result, int) and result >= 0, \"The result must be a non-negative integer.\"\n\n    # Postcondition 2: If the input has odd digits, ensure the result is not zero.\n    if has_odd:\n        assert result != 0, \"The result must not be zero if there are odd digits in the input.\"\n\n    return result\n"}
{"id": "HumanEval/132", "code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    # Precondition 1: Ensure that 'string' is not None.\n    assert string is not None, \"Input 'string' must not be None.\"\n\n    # Precondition 2: Ensure that 'string' is a string.\n    assert isinstance(string, str), \"Input 'string' must be a string.\"\n\n    # Precondition 3: Ensure that 'string' contains only square brackets.\n    assert all(ch in \"[]\" for ch in string), \"Input 'string' must contain only square brackets.\"\n\n    for i in range(len(string)):\n        if string[i] == \"]\":\n            continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n\n    # Postcondition 1: Ensure that the result is a boolean.\n    result = False\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return False\n"}
{"id": "HumanEval/133", "code": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n\n    import math\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'lst' are numbers (integers or floats).\n    assert all(isinstance(x, (int, float)) for x in lst), \"All elements in 'lst' must be integers or floats.\"\n\n    result = sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative.\n    assert result >= 0, \"The result must be non-negative.\"\n\n    return result\n\n"}
{"id": "HumanEval/134", "code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Precondition 1: Ensure that 'txt' is not None.\n    assert txt is not None, \"Input 'txt' must not be None.\"\n\n    # Precondition 2: Ensure that 'txt' is a string.\n    assert isinstance(txt, str), \"Input 'txt' must be a string.\"\n\n    # Postcondition 1: Return False for empty string.\n    if len(txt) == 0:\n        return False\n\n    # Postcondition 2: If the string has one character, check if it's a letter.\n    if len(txt) == 1:\n        result = txt.isalpha()\n        assert isinstance(result, bool), \"The result must be a boolean.\"\n        return result\n\n    # Postcondition 3: Ensure that the last character is a letter and the second last character is a space.\n    result = txt[-1].isalpha() and txt[-2] == \" \"\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return result\n"}
{"id": "HumanEval/135", "code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Precondition 1: Ensure that 'arr' is not None.\n    assert arr is not None, \"Input 'arr' must not be None.\"\n\n    # Precondition 2: Ensure that 'arr' is a list.\n    assert isinstance(arr, list), \"Input 'arr' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'arr' are integers.\n    assert all(isinstance(x, int) for x in arr), \"All elements in 'arr' must be integers.\"\n\n    # Precondition 4: Ensure that the list does not contain duplicate values.\n    assert len(arr) == len(set(arr)), \"Input 'arr' must not contain duplicate values.\"\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            result = i\n            break\n    else:\n        result = -1\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is a valid index or -1.\n    assert result == -1 or (0 <= result < len(arr)), \"The result must be -1 or a valid index within the range of 'arr'.\"\n\n    return result\n"}
{"id": "HumanEval/136", "code": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Precondition 1: Ensure that 'lst' is not None.\n    assert lst is not None, \"Input 'lst' must not be None.\"\n\n    # Precondition 2: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 3: Ensure that all elements in 'lst' are integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n\n    result = (None if not neg else max(neg), None if not pos else min(pos))\n\n    # Postcondition 1: Ensure that the result is a tuple.\n    assert isinstance(result, tuple), \"The result must be a tuple.\"\n\n    # Postcondition 2: Ensure that the tuple has exactly two elements.\n    assert len(result) == 2, \"The result tuple must have exactly two elements.\"\n\n    # Postcondition 3: Ensure that the first element is either None or a negative integer.\n    assert result[0] is None or result[0] < 0, \"The first element must be None or a negative integer.\"\n\n    # Postcondition 4: Ensure that the second element is either None or a positive integer.\n    assert result[1] is None or result[1] > 0, \"The second element must be None or a positive integer.\"\n\n    return result\n"}
{"id": "HumanEval/137", "code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Precondition 1: Ensure that 'a' and 'b' are either integers, floats, or strings.\n    assert isinstance(a, (int, float, str)), \"Input 'a' must be an integer, float, or string.\"\n    assert isinstance(b, (int, float, str)), \"Input 'b' must be an integer, float, or string.\"\n\n    # Convert both a and b to float for comparison\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n\n    # Postcondition 1: Ensure that 'num_a' and 'num_b' are valid floats.\n    assert isinstance(num_a, float), \"'num_a' must be a float after conversion.\"\n    assert isinstance(num_b, float), \"'num_b' must be a float after conversion.\"\n\n    # Compare the two numbers and return the original value with its type\n    if num_a == num_b:\n        result = None\n    else:\n        result = a if num_a > num_b else b\n\n    # Postcondition 2: Ensure that the result is either None or the same type as the larger input.\n    assert result is None or isinstance(result, type(a)) or isinstance(result, type(b)), \"The result must be None or the same type as one of the inputs.\"\n\n    return result\n"}
{"id": "HumanEval/138", "code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a positive integer.\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a positive integer.\"\n\n    result = n >= 8 and n % 2 == 0\n\n    # Postcondition 1: Ensure that the result is a boolean.\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return result\n"}
{"id": "HumanEval/139", "code": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a positive integer.\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a positive integer.\"\n\n    fac, ans = 1, 1\n    for i in range(2, n + 1):\n        fac *= i\n        ans *= fac\n\n    # Postcondition 1: Ensure that the result is a non-negative integer.\n    assert isinstance(ans, int) and ans >= 0, \"The result must be a non-negative integer.\"\n\n    return ans\n\n\n"}
{"id": "HumanEval/140", "code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Precondition 1: Ensure that 'text' is a string.\n    assert isinstance(text, str), \"Input 'text' must be a string.\"\n\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    result = ans.replace(\" \", \"_\")\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that there are no sequences of three or more spaces in the result.\n    assert \"   \" not in result, \"The result must not contain three or more consecutive spaces.\"\n\n    # Postcondition 3: Ensure that all single spaces are replaced by underscores.\n    assert \" \" not in result, \"The result must not contain single spaces.\"\n\n    return result\n"}
{"id": "HumanEval/141", "code": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n\n    # Precondition 1: Ensure that 'file_name' is a string.\n    assert isinstance(file_name, str), \"Input 'file_name' must be a string.\"\n\n    # Check for more than three digits in the file name\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    \n    # Split the file name by dot\n    f_list = file_name.split(\".\")\n    \n    # Check for exactly one dot in the file name\n    if len(f_list) != 2:\n        return \"No\"\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if len(f_list[0]) == 0 or not f_list[0][0].isalpha():\n        return \"No\"\n    \n    # Check if the extension is valid\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    result = \"Yes\"\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is either 'Yes' or 'No'.\n    assert result in [\"Yes\", \"No\"], \"The result must be either 'Yes' or 'No'.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/142", "code": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    # Precondition 1: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'lst' are integers.\n    assert all(isinstance(x, int) for x in lst), \"All elements in 'lst' must be integers.\"\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(ans, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is not None.\n    assert ans is not None, \"The result must not be None.\"\n\n    return ans\n\n"}
{"id": "HumanEval/143", "code": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    # Precondition 1: Ensure that 'sentence' is a string.\n    assert isinstance(sentence, str), \"Input 'sentence' must be a string.\"\n\n    # Precondition 2: Ensure that the length of 'sentence' is within the valid range.\n    assert 1 <= len(sentence) <= 100, \"Length of 'sentence' must be between 1 and 100.\"\n\n    # Precondition 3: Ensure that 'sentence' contains only letters and spaces.\n    assert all(ch.isalpha() or ch.isspace() for ch in sentence), \"Sentence must contain only letters and spaces.\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    result = \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result only contains words from the original sentence.\n    assert all(word in sentence.split(\" \") for word in result.split(\" \")), \"The result must only contain words from the original sentence.\"\n\n    # Postcondition 3: Ensure that the result preserves the order of the original sentence.\n    words = sentence.split(\" \")\n    filtered_words = [word for word in words if is_prime(len(word))]\n    assert result.split(\" \") == filtered_words, \"The order of words in the result must be the same as in the original sentence.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/144", "code": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\n"}
{"id": "HumanEval/145", "code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Precondition 1: Ensure that 'nums' is a list.\n    assert isinstance(nums, list), \"Input 'nums' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'nums' are integers.\n    assert all(isinstance(x, int) for x in nums), \"All elements in 'nums' must be integers.\"\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n\n    result = sorted(nums, key=weight)\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result has the same length as the input list.\n    assert len(result) == len(nums), \"The result list must have the same length as the input list.\"\n\n    # Postcondition 3: Ensure that the result list contains the same elements as the input list.\n    assert sorted(result) == sorted(nums), \"The result list must contain the same elements as the input list.\"\n\n    return result\n"}
{"id": "HumanEval/146", "code": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    # Precondition 1: Ensure that 'nums' is a list.\n    assert isinstance(nums, list), \"Input 'nums' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'nums' are integers.\n    assert all(isinstance(x, int) for x in nums), \"All elements in 'nums' must be integers.\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        # Extracting the absolute value string to handle negative numbers correctly\n        num_str = str(abs(num))\n        if num > 10 and num_str[0] in odd and num_str[-1] in odd:\n            ans += 1\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(ans, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is non-negative.\n    assert ans >= 0, \"The result must be non-negative.\"\n\n    return ans\n"}
{"id": "HumanEval/147", "code": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n' is a positive integer.\n    assert isinstance(n, int) and n > 0, \"Input 'n' must be a positive integer.\"\n\n    # Handle cases where n is too small to form any triples.\n    if n <= 2:\n        return 0\n\n    # Calculating counts of elements where (a[i] % 3 == 1) and (a[i] % 3 == 0)\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n\n    # Calculating the number of valid triples\n    result = one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n    # Postcondition 1: Ensure that the result is a non-negative integer.\n    assert isinstance(result, int) and result >= 0, \"The result must be a non-negative integer.\"\n\n    return result\n"}
{"id": "HumanEval/148", "code": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Precondition 1: Ensure that 'planet1' and 'planet2' are strings.\n    assert isinstance(planet1, str), \"Input 'planet1' must be a string.\"\n    assert isinstance(planet2, str), \"Input 'planet2' must be a string.\"\n\n    # Precondition 2: Ensure that 'planet1' and 'planet2' are valid planet names.\n    assert planet1 in planets, f\"'{planet1}' is not a valid planet name.\"\n    assert planet2 in planets, f\"'{planet2}' is not a valid planet name.\"\n\n    # Determine the indices of the planets\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n\n    # Ensure the indices are in ascending order\n    if i1 > i2:\n        i1, i2 = i2, i1\n\n    # Determine the planets between the two given planets\n    result = tuple(planets[i1 + 1 : i2])\n\n    # Postcondition 1: Ensure that the result is a tuple.\n    assert isinstance(result, tuple), \"The result must be a tuple.\"\n\n    # Postcondition 2: Ensure that the result contains the correct planets.\n    if i2 - i1 > 1:\n        assert all(planet in planets for planet in result), \"The result must contain valid planet names.\"\n\n    return result\n\n"}
{"id": "HumanEval/149", "code": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulting list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by the length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'lst' are strings.\n    assert all(isinstance(s, str) for s in lst), \"All elements in 'lst' must be strings.\"\n\n    # Filter out strings with odd lengths and sort\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n\n    filtered_sorted_list = sorted(\n        filter(lambda s: len(s) % 2 == 0, lst), key=cmp_to_key(cmp)\n    )\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(filtered_sorted_list, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that all elements in the result have even lengths.\n    assert all(len(s) % 2 == 0 for s in filtered_sorted_list), \"All elements in the result must have even lengths.\"\n\n    # Postcondition 3: Ensure that the result is sorted by length and then alphabetically.\n    for i in range(1, len(filtered_sorted_list)):\n        assert len(filtered_sorted_list[i-1]) <= len(filtered_sorted_list[i]), \"The list must be sorted by length.\"\n        if len(filtered_sorted_list[i-1]) == len(filtered_sorted_list[i]):\n            assert filtered_sorted_list[i-1] <= filtered_sorted_list[i], \"The list must be sorted alphabetically for words of the same length.\"\n\n    return filtered_sorted_list\n"}
{"id": "HumanEval/150", "code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \"\"\"\n\n    # Precondition 1: Ensure that 'n', 'x', and 'y' are integers.\n    assert isinstance(n, int), \"Input 'n' must be an integer.\"\n    assert isinstance(x, int), \"Input 'x' must be an integer.\"\n    assert isinstance(y, int), \"Input 'y' must be an integer.\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    result = x if is_prime(n) else y\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    # Postcondition 2: Ensure that the result is either 'x' or 'y'.\n    assert result in [x, y], \"The result must be either 'x' or 'y'.\"\n\n    return result\n"}
{"id": "HumanEval/151", "code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    # Precondition 1: Ensure that 'lst' is a list.\n    assert isinstance(lst, list), \"Input 'lst' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'lst' are either integers or floats.\n    assert all(isinstance(num, (int, float)) for num in lst), \"All elements in 'lst' must be integers or floats.\"\n\n    ans = 0\n    for num in lst:\n        # Postcondition 1: Ensure that 'num' is a non-negative integer if considered.\n        if isinstance(num, int) and num % 2 == 1 and num > 0:\n            ans += num ** 2\n\n    # Postcondition 2: Ensure that the result is a non-negative integer.\n    assert isinstance(ans, int) and ans >= 0, \"The result must be a non-negative integer.\"\n\n    return ans\n"}
{"id": "HumanEval/152", "code": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # Precondition 1: Ensure that 'game' and 'guess' are lists.\n    assert isinstance(game, list), \"Input 'game' must be a list.\"\n    assert isinstance(guess, list), \"Input 'guess' must be a list.\"\n\n    # Precondition 2: Ensure that 'game' and 'guess' are of the same length.\n    assert len(game) == len(guess), \"Input lists 'game' and 'guess' must have the same length.\"\n\n    # Precondition 3: Ensure that all elements in 'game' and 'guess' are integers.\n    assert all(isinstance(x, int) for x in game), \"All elements in 'game' must be integers.\"\n    assert all(isinstance(x, int) for x in guess), \"All elements in 'guess' must be integers.\"\n\n    result = [abs(game[i] - guess[i]) for i in range(len(game))]\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result list has the same length as the input lists.\n    assert len(result) == len(game), \"The result list must have the same length as the input lists.\"\n\n    # Postcondition 3: Ensure that all elements in the result list are non-negative integers.\n    assert all(isinstance(x, int) and x >= 0 for x in result), \"All elements in the result list must be non-negative integers.\"\n\n    return result\n\n"}
{"id": "HumanEval/153", "code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    # Precondition 1: Ensure that 'class_name' is a string.\n    assert isinstance(class_name, str), \"Input 'class_name' must be a string.\"\n\n    # Precondition 2: Ensure that 'extensions' is a list of strings.\n    assert isinstance(extensions, list), \"Input 'extensions' must be a list.\"\n    assert all(isinstance(ext, str) for ext in extensions), \"All elements in 'extensions' must be strings.\"\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            elif ch.islower():\n                SM += 1\n        return CAP - SM\n\n    max_strength = max(map(strength, extensions))\n\n    # Postcondition 1: Ensure that max_strength is an integer.\n    assert isinstance(max_strength, int), \"The maximum strength must be an integer.\"\n\n    for e in extensions:\n        if strength(e) == max_strength:\n            # Postcondition 2: Ensure that the result is a string in the format 'ClassName.ExtensionName'.\n            result = class_name + \".\" + e\n            assert isinstance(result, str) and result.startswith(class_name + \".\"), \"The result must be a string in the format 'ClassName.ExtensionName'.\"\n            return result\n"}
{"id": "HumanEval/154", "code": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n\n    assert isinstance(a, str), \"Input 'a' must be a string.\"\n   \n\n    assert isinstance(b, str), \"Input 'b' must be a string.\"\n\n    # Check if 'b' or any of its rotations is a substring of 'a'\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    result = False\n\n    # Postcondition 1: Ensure that the result is a boolean.\n    assert isinstance(result, bool), \"The result must be a boolean.\"\n\n    return result\n\n\n"}
{"id": "HumanEval/155", "code": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Precondition 1: Ensure that 'num' is an integer.\n    assert isinstance(num, int), \"Input 'num' must be an integer.\"\n\n    even, odd = 0, 0\n    for ch in str(abs(num)):  # Use abs(num) to handle negative numbers correctly\n        if ch in \"02468\":\n            even += 1\n        elif ch in \"13579\":\n            odd += 1\n\n    # Postcondition 1: Ensure that the result is a tuple.\n    assert isinstance((even, odd), tuple), \"The result must be a tuple.\"\n\n    # Postcondition 2: Ensure that the result tuple contains two non-negative integers.\n    assert isinstance(even, int) and even >= 0, \"The number of even digits must be a non-negative integer.\"\n    assert isinstance(odd, int) and odd >= 0, \"The number of odd digits must be a non-negative integer.\"\n\n    return even, odd\n"}
{"id": "HumanEval/156", "code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Precondition 1: Ensure that 'number' is an integer.\n    assert isinstance(number, int), \"Input 'number' must be an integer.\"\n\n    # Precondition 2: Ensure that 'number' is within the valid range.\n    assert 1 <= number <= 1000, \"Input 'number' must be between 1 and 1000, inclusive.\"\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    \n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    \n    result = thousands + hundreds + tens + ones\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is in lowercase.\n    assert result == result.lower(), \"The result must be in lowercase.\"\n\n    return result\n"}
{"id": "HumanEval/157", "code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Precondition 1: Ensure that 'a', 'b', and 'c' are positive numbers.\n    assert isinstance(a, (int, float)) and a > 0, \"'a' must be a positive number.\"\n    assert isinstance(b, (int, float)) and b > 0, \"'b' must be a positive number.\"\n    assert isinstance(c, (int, float)) and c > 0, \"'c' must be a positive number.\"\n\n    # Check if the sides form a right-angled triangle\n    result = a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n    # Postcondition 1: Ensure that the result is a boolean value.\n    assert isinstance(result, bool), \"The result must be a boolean value.\"\n\n    return result\n"}
{"id": "HumanEval/158", "code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    # Precondition 1: Ensure that 'words' is a list.\n    assert isinstance(words, list), \"Input 'words' must be a list.\"\n\n    # Precondition 2: Ensure that all elements in 'words' are strings.\n    assert all(isinstance(word, str) for word in words), \"All elements in 'words' must be strings.\"\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word))\n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(ans, str), \"The result must be a string.\"\n\n    # Postcondition 2: Ensure that the result is one of the words from the input list.\n    assert ans in words, \"The result must be one of the words in the input list.\"\n\n    return ans\n\n"}
{"id": "HumanEval/159", "code": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals].\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constraint:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Precondition 1: Ensure that 'number', 'need', and 'remaining' are integers.\n    assert isinstance(number, int), \"Input 'number' must be an integer.\"\n    assert isinstance(need, int), \"Input 'need' must be an integer.\"\n    assert isinstance(remaining, int), \"Input 'remaining' must be an integer.\"\n\n    # Precondition 2: Ensure that 'number', 'need', and 'remaining' are within the valid range.\n    assert 0 <= number <= 1000, \"'number' must be between 0 and 1000, inclusive.\"\n    assert 0 <= need <= 1000, \"'need' must be between 0 and 1000, inclusive.\"\n    assert 0 <= remaining <= 1000, \"'remaining' must be between 0 and 1000, inclusive.\"\n\n    if need <= remaining:\n        result = [number + need, remaining - need]\n    else:\n        result = [number + remaining, 0]\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result has two elements.\n    assert len(result) == 2, \"The result list must contain exactly two elements.\"\n\n    # Postcondition 3: Ensure that the first element of the result is the total number of eaten carrots.\n    assert isinstance(result[0], int) and result[0] == number + min(need, remaining), \"The first element must be the total number of eaten carrots.\"\n\n    # Postcondition 4: Ensure that the second element of the result is the remaining number of carrots.\n    assert isinstance(result[1], int) and result[1] == max(0, remaining - need), \"The second element must be the number of carrots left after the meal.\"\n\n    return result\n"}
{"id": "HumanEval/160", "code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        The operator list has at least one operator, and the operand list has at least two operands.\n    \"\"\"\n\n    # Precondition 1: Ensure that 'operator' and 'operand' are lists.\n    assert isinstance(operator, list), \"Input 'operator' must be a list.\"\n    assert isinstance(operand, list), \"Input 'operand' must be a list.\"\n\n    # Precondition 2: Ensure that 'operator' contains valid operators and 'operand' contains non-negative integers.\n    valid_operators = {'+', '-', '*', '//', '**'}\n    assert all(op in valid_operators for op in operator), \"All elements in 'operator' must be valid algebraic operators.\"\n    assert all(isinstance(num, int) and num >= 0 for num in operand), \"All elements in 'operand' must be non-negative integers.\"\n\n    # Precondition 3: Ensure that the length of 'operator' is equal to the length of 'operand' minus one.\n    assert len(operator) == len(operand) - 1, \"The length of 'operator' must be equal to the length of 'operand' minus one.\"\n\n    # Precondition 4: Ensure that 'operand' contains at least two integers.\n    assert len(operand) >= 2, \"'operand' must contain at least two integers.\"\n\n    # Build the algebraic expression as a string\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n\n    # Evaluate the expression\n    result = eval(exp)\n\n    # Postcondition 1: Ensure that the result is an integer.\n    assert isinstance(result, int), \"The result must be an integer.\"\n\n    return result\n"}
{"id": "HumanEval/161", "code": "def solve(s):\n    \"\"\"You are given a string s.\n    If s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulting string.\n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # Precondition 1: Ensure that 's' is a string.\n    assert isinstance(s, str), \"Input 's' must be a string.\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n\n    result = ans if has_letter else s[::-1]\n\n    # Postcondition 1: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 2: If the original string 's' contains letters, ensure that all letters have their case swapped in the result.\n    if any(ch.isalpha() for ch in s):\n        assert all((ch.swapcase() == result[i]) if ch.isalpha() else (ch == result[i]) for i, ch in enumerate(s)), \"All letters must have their case swapped.\"\n\n    # Postcondition 3: If the original string 's' contains no letters, ensure the result is the reversed string.\n    if not any(ch.isalpha() for ch in s):\n        assert result == s[::-1], \"If the string contains no letters, it should be reversed.\"\n\n    return result\n"}
{"id": "HumanEval/162", "code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    # Precondition 1: Ensure that 'text' is a string.\n    assert isinstance(text, str), \"Input 'text' must be a string.\"\n\n    if text == \"\":\n        # Postcondition 1: Ensure that the result is None when the input is an empty string.\n        assert text == \"\", \"When the input is an empty string, the result should be None.\"\n        return None\n\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    result = m.hexdigest()\n\n    # Postcondition 2: Ensure that the result is a string.\n    assert isinstance(result, str), \"The result must be a string.\"\n\n    # Postcondition 3: Ensure that the result is a 32-character hexadecimal string.\n    assert len(result) == 32 and all(c in \"0123456789abcdef\" for c in result), \"The result must be a 32-character hexadecimal string.\"\n\n    return result\n\n"}
{"id": "HumanEval/163", "code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Precondition 1: Ensure that 'a' and 'b' are positive integers.\n    assert isinstance(a, int) and a > 0, \"Input 'a' must be a positive integer.\"\n    assert isinstance(b, int) and b > 0, \"Input 'b' must be a positive integer.\"\n\n    if a > b: \n        a, b = b, a\n    \n    result = [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n    # Postcondition 1: Ensure that the result is a list.\n    assert isinstance(result, list), \"The result must be a list.\"\n\n    # Postcondition 2: Ensure that the result contains only even digits.\n    assert all(i % 2 == 0 for i in result), \"All elements in the result must be even digits.\"\n\n    # Postcondition 3: Ensure that the result contains only digits between 2 and 8 (inclusive).\n    assert all(2 <= i <= 8 for i in result), \"All elements in the result must be between 2 and 8.\"\n\n    return result\n"}
